// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	client "sigs.k8s.io/controller-runtime/pkg/client"

	gocloak "github.com/Nerzal/gocloak/v12"

	helper "github.com/epam/edp-keycloak-operator/controllers/helper"

	keycloak "github.com/epam/edp-keycloak-operator/pkg/client/keycloak"

	mock "github.com/stretchr/testify/mock"

	time "time"

	v1 "github.com/epam/edp-keycloak-operator/api/v1"

	v1alpha1 "github.com/epam/edp-keycloak-operator/api/v1alpha1"
)

// ControllerHelper is an autogenerated mock type for the ControllerHelper type
type ControllerHelper struct {
	mock.Mock
}

// CreateKeycloakClient provides a mock function with given fields: ctx, url, user, password, adminType
func (_m *ControllerHelper) CreateKeycloakClient(ctx context.Context, url string, user string, password string, adminType string) (keycloak.Client, error) {
	ret := _m.Called(ctx, url, user, password, adminType)

	var r0 keycloak.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (keycloak.Client, error)); ok {
		return rf(ctx, url, user, password, adminType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) keycloak.Client); ok {
		r0 = rf(ctx, url, user, password, adminType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(keycloak.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, url, user, password, adminType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateKeycloakClientFomAuthData provides a mock function with given fields: ctx, authData
func (_m *ControllerHelper) CreateKeycloakClientFomAuthData(ctx context.Context, authData *helper.KeycloakAuthData) (keycloak.Client, error) {
	ret := _m.Called(ctx, authData)

	var r0 keycloak.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *helper.KeycloakAuthData) (keycloak.Client, error)); ok {
		return rf(ctx, authData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *helper.KeycloakAuthData) keycloak.Client); ok {
		r0 = rf(ctx, authData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(keycloak.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *helper.KeycloakAuthData) error); ok {
		r1 = rf(ctx, authData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateKeycloakClientFromClusterRealm provides a mock function with given fields: ctx, realm
func (_m *ControllerHelper) CreateKeycloakClientFromClusterRealm(ctx context.Context, realm *v1alpha1.ClusterKeycloakRealm) (keycloak.Client, error) {
	ret := _m.Called(ctx, realm)

	var r0 keycloak.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.ClusterKeycloakRealm) (keycloak.Client, error)); ok {
		return rf(ctx, realm)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.ClusterKeycloakRealm) keycloak.Client); ok {
		r0 = rf(ctx, realm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(keycloak.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.ClusterKeycloakRealm) error); ok {
		r1 = rf(ctx, realm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateKeycloakClientFromRealm provides a mock function with given fields: ctx, realm
func (_m *ControllerHelper) CreateKeycloakClientFromRealm(ctx context.Context, realm *v1.KeycloakRealm) (keycloak.Client, error) {
	ret := _m.Called(ctx, realm)

	var r0 keycloak.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.KeycloakRealm) (keycloak.Client, error)); ok {
		return rf(ctx, realm)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.KeycloakRealm) keycloak.Client); ok {
		r0 = rf(ctx, realm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(keycloak.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.KeycloakRealm) error); ok {
		r1 = rf(ctx, realm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateKeycloakClientFromRealmRef provides a mock function with given fields: ctx, object
func (_m *ControllerHelper) CreateKeycloakClientFromRealmRef(ctx context.Context, object helper.ObjectWithRealmRef) (keycloak.Client, error) {
	ret := _m.Called(ctx, object)

	var r0 keycloak.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, helper.ObjectWithRealmRef) (keycloak.Client, error)); ok {
		return rf(ctx, object)
	}
	if rf, ok := ret.Get(0).(func(context.Context, helper.ObjectWithRealmRef) keycloak.Client); ok {
		r0 = rf(ctx, object)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(keycloak.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, helper.ObjectWithRealmRef) error); ok {
		r1 = rf(ctx, object)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeycloakRealmFromRef provides a mock function with given fields: ctx, object, kcClient
func (_m *ControllerHelper) GetKeycloakRealmFromRef(ctx context.Context, object helper.ObjectWithRealmRef, kcClient keycloak.Client) (*gocloak.RealmRepresentation, error) {
	ret := _m.Called(ctx, object, kcClient)

	var r0 *gocloak.RealmRepresentation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, helper.ObjectWithRealmRef, keycloak.Client) (*gocloak.RealmRepresentation, error)); ok {
		return rf(ctx, object, kcClient)
	}
	if rf, ok := ret.Get(0).(func(context.Context, helper.ObjectWithRealmRef, keycloak.Client) *gocloak.RealmRepresentation); ok {
		r0 = rf(ctx, object, kcClient)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocloak.RealmRepresentation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, helper.ObjectWithRealmRef, keycloak.Client) error); ok {
		r1 = rf(ctx, object, kcClient)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvalidateKeycloakClientTokenSecret provides a mock function with given fields: ctx, namespace, rootKeycloakName
func (_m *ControllerHelper) InvalidateKeycloakClientTokenSecret(ctx context.Context, namespace string, rootKeycloakName string) error {
	ret := _m.Called(ctx, namespace, rootKeycloakName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, namespace, rootKeycloakName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetFailureCount provides a mock function with given fields: fc
func (_m *ControllerHelper) SetFailureCount(fc helper.FailureCountable) time.Duration {
	ret := _m.Called(fc)

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(helper.FailureCountable) time.Duration); ok {
		r0 = rf(fc)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// SetKeycloakOwnerRef provides a mock function with given fields: ctx, object
func (_m *ControllerHelper) SetKeycloakOwnerRef(ctx context.Context, object helper.ObjectWithKeycloakRef) error {
	ret := _m.Called(ctx, object)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, helper.ObjectWithKeycloakRef) error); ok {
		r0 = rf(ctx, object)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetRealmOwnerRef provides a mock function with given fields: ctx, object
func (_m *ControllerHelper) SetRealmOwnerRef(ctx context.Context, object helper.ObjectWithRealmRef) error {
	ret := _m.Called(ctx, object)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, helper.ObjectWithRealmRef) error); ok {
		r0 = rf(ctx, object)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TryToDelete provides a mock function with given fields: ctx, obj, terminator, finalizer
func (_m *ControllerHelper) TryToDelete(ctx context.Context, obj client.Object, terminator helper.Terminator, finalizer string) (bool, error) {
	ret := _m.Called(ctx, obj, terminator, finalizer)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.Object, helper.Terminator, string) (bool, error)); ok {
		return rf(ctx, obj, terminator, finalizer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.Object, helper.Terminator, string) bool); ok {
		r0 = rf(ctx, obj, terminator, finalizer)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.Object, helper.Terminator, string) error); ok {
		r1 = rf(ctx, obj, terminator, finalizer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewControllerHelper creates a new instance of ControllerHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewControllerHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *ControllerHelper {
	mock := &ControllerHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
