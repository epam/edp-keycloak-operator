name: "Continuous Integration"

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  GOLANG_VERSION: '1.20'

jobs:
  check-commit-message:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check Commit Format
        uses: gsactions/commit-message-checker@v2
        with:
          pattern: '^(fix|feat|docs|style|refactor|test|chore): .+ \(#\d+\)$'
          error: 'Your commit message should be in the format "type: Description (#issue)". Example: "fix: Update build (#33)"'

      - name: Check Line Length
        uses: gsactions/commit-message-checker@v2
        with:
          pattern: '.{0,50}'
          error: 'The maximum line length of 50 characters is exceeded.'
          excludeDescription: 'true'
          excludeTitle: 'true'
          checkAllCommitMessages: 'true'
          accessToken: ${{ secrets.GITHUB_TOKEN }}

  helm-lint:
    needs: [check-commit-message]
    runs-on: ubuntu-22.04
    env:
     Ð¡HART_DIR: "deploy-templates"
     CT_CONFIGS_DIR: "."
     CT_CONFIGS_DIR_DEFAULT: "ct-configs"
     CT_FILE_PATH: "ct.yaml"
     LINTCONF_FILE_PATH: "lintconf.yaml"
     CHART_SCHEMA_FILE_PATH: "chart_schema.yaml"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.1

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          check-latest: true

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.6.0

      - name: Run chart-testing (lint)
        run: ct lint --target-branch ${{ github.event.repository.default_branch }} \
               --charts ${CHART_DIR}/ \
               --config ${CT_FILE_PATH} \
               --lint-conf ${LINTCONF_FILE_PATH} \
               --chart-yaml-schema ${CHART_SCHEMA_FILE_PATH}

  build-lint-validate:
    needs: [helm-lint]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GOLANG_VERSION }}

      - name: Make Build
        run: make build

      - name: Make Lint
        run: make lint

      - name: Make validate-docs
        run: make validate-docs

  docker-lint:
    needs: [build-lint-validate]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run hadolint
        uses: hadolint/hadolint-action@v1.5.0
        with:
          dockerfile: Dockerfile

  integration-tests:
    runs-on: ubuntu-latest
    needs: [docker-lint]
    strategy:
      matrix:
        kube-version:
        - "1.26"
        - "1.27"
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GOLANG_VERSION }}

    - name: Check out code into the Go module directory
      uses: actions/checkout@v4

    - name: "run tests"
      env:
        KUBE_VERSION: ${{ matrix.kube-version }}
      run: make start-kind KUBE_VERSION=$KUBE_VERSION

    - name: Deploy Keycloak server and wait for readiness
      run: |
        kubectl apply -f tests/e2e/helm-success-path/01-install-keycloak-server.yaml --namespace keycloak
        kubectl wait --for condition=Available=True deployment keycloak --timeout=120s --namespace keycloak

    - name: Port-forward Keycloak service
      run: kubectl port-forward svc/keycloak 8081:8081 --namespace keycloak & sleep 5

    - name: Run tests against the Keycloak service
      run: |
        export TEST_KEYCLOAK_URL="http://localhost:8081"
        make test

    - name: Delete the Kubernetes cluster
      if: always()
      run: kind delete cluster
