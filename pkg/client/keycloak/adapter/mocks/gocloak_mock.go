// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gocloak "github.com/Nerzal/gocloak/v12"
	mock "github.com/stretchr/testify/mock"

	resty "github.com/go-resty/resty/v2"
)

// MockGoCloak is an autogenerated mock type for the GoCloak type
type MockGoCloak struct {
	mock.Mock
}

type MockGoCloak_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGoCloak) EXPECT() *MockGoCloak_Expecter {
	return &MockGoCloak_Expecter{mock: &_m.Mock}
}

// AddClientRoleToGroup provides a mock function with given fields: ctx, token, realm, clientID, groupID, roles
func (_m *MockGoCloak) AddClientRoleToGroup(ctx context.Context, token string, realm string, clientID string, groupID string, roles []gocloak.Role) error {
	ret := _m.Called(ctx, token, realm, clientID, groupID, roles)

	if len(ret) == 0 {
		panic("no return value specified for AddClientRoleToGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []gocloak.Role) error); ok {
		r0 = rf(ctx, token, realm, clientID, groupID, roles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoCloak_AddClientRoleToGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddClientRoleToGroup'
type MockGoCloak_AddClientRoleToGroup_Call struct {
	*mock.Call
}

// AddClientRoleToGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - clientID string
//   - groupID string
//   - roles []gocloak.Role
func (_e *MockGoCloak_Expecter) AddClientRoleToGroup(ctx interface{}, token interface{}, realm interface{}, clientID interface{}, groupID interface{}, roles interface{}) *MockGoCloak_AddClientRoleToGroup_Call {
	return &MockGoCloak_AddClientRoleToGroup_Call{Call: _e.mock.On("AddClientRoleToGroup", ctx, token, realm, clientID, groupID, roles)}
}

func (_c *MockGoCloak_AddClientRoleToGroup_Call) Run(run func(ctx context.Context, token string, realm string, clientID string, groupID string, roles []gocloak.Role)) *MockGoCloak_AddClientRoleToGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].([]gocloak.Role))
	})
	return _c
}

func (_c *MockGoCloak_AddClientRoleToGroup_Call) Return(_a0 error) *MockGoCloak_AddClientRoleToGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoCloak_AddClientRoleToGroup_Call) RunAndReturn(run func(context.Context, string, string, string, string, []gocloak.Role) error) *MockGoCloak_AddClientRoleToGroup_Call {
	_c.Call.Return(run)
	return _c
}

// AddClientRoleToUser provides a mock function with given fields: ctx, token, realm, clientID, userID, roles
func (_m *MockGoCloak) AddClientRoleToUser(ctx context.Context, token string, realm string, clientID string, userID string, roles []gocloak.Role) error {
	ret := _m.Called(ctx, token, realm, clientID, userID, roles)

	if len(ret) == 0 {
		panic("no return value specified for AddClientRoleToUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []gocloak.Role) error); ok {
		r0 = rf(ctx, token, realm, clientID, userID, roles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoCloak_AddClientRoleToUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddClientRoleToUser'
type MockGoCloak_AddClientRoleToUser_Call struct {
	*mock.Call
}

// AddClientRoleToUser is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - clientID string
//   - userID string
//   - roles []gocloak.Role
func (_e *MockGoCloak_Expecter) AddClientRoleToUser(ctx interface{}, token interface{}, realm interface{}, clientID interface{}, userID interface{}, roles interface{}) *MockGoCloak_AddClientRoleToUser_Call {
	return &MockGoCloak_AddClientRoleToUser_Call{Call: _e.mock.On("AddClientRoleToUser", ctx, token, realm, clientID, userID, roles)}
}

func (_c *MockGoCloak_AddClientRoleToUser_Call) Run(run func(ctx context.Context, token string, realm string, clientID string, userID string, roles []gocloak.Role)) *MockGoCloak_AddClientRoleToUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].([]gocloak.Role))
	})
	return _c
}

func (_c *MockGoCloak_AddClientRoleToUser_Call) Return(_a0 error) *MockGoCloak_AddClientRoleToUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoCloak_AddClientRoleToUser_Call) RunAndReturn(run func(context.Context, string, string, string, string, []gocloak.Role) error) *MockGoCloak_AddClientRoleToUser_Call {
	_c.Call.Return(run)
	return _c
}

// AddDefaultScopeToClient provides a mock function with given fields: ctx, token, realm, clientID, scopeID
func (_m *MockGoCloak) AddDefaultScopeToClient(ctx context.Context, token string, realm string, clientID string, scopeID string) error {
	ret := _m.Called(ctx, token, realm, clientID, scopeID)

	if len(ret) == 0 {
		panic("no return value specified for AddDefaultScopeToClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, token, realm, clientID, scopeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoCloak_AddDefaultScopeToClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDefaultScopeToClient'
type MockGoCloak_AddDefaultScopeToClient_Call struct {
	*mock.Call
}

// AddDefaultScopeToClient is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - clientID string
//   - scopeID string
func (_e *MockGoCloak_Expecter) AddDefaultScopeToClient(ctx interface{}, token interface{}, realm interface{}, clientID interface{}, scopeID interface{}) *MockGoCloak_AddDefaultScopeToClient_Call {
	return &MockGoCloak_AddDefaultScopeToClient_Call{Call: _e.mock.On("AddDefaultScopeToClient", ctx, token, realm, clientID, scopeID)}
}

func (_c *MockGoCloak_AddDefaultScopeToClient_Call) Run(run func(ctx context.Context, token string, realm string, clientID string, scopeID string)) *MockGoCloak_AddDefaultScopeToClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockGoCloak_AddDefaultScopeToClient_Call) Return(_a0 error) *MockGoCloak_AddDefaultScopeToClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoCloak_AddDefaultScopeToClient_Call) RunAndReturn(run func(context.Context, string, string, string, string) error) *MockGoCloak_AddDefaultScopeToClient_Call {
	_c.Call.Return(run)
	return _c
}

// AddRealmRoleComposite provides a mock function with given fields: ctx, token, realm, roleName, roles
func (_m *MockGoCloak) AddRealmRoleComposite(ctx context.Context, token string, realm string, roleName string, roles []gocloak.Role) error {
	ret := _m.Called(ctx, token, realm, roleName, roles)

	if len(ret) == 0 {
		panic("no return value specified for AddRealmRoleComposite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []gocloak.Role) error); ok {
		r0 = rf(ctx, token, realm, roleName, roles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoCloak_AddRealmRoleComposite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRealmRoleComposite'
type MockGoCloak_AddRealmRoleComposite_Call struct {
	*mock.Call
}

// AddRealmRoleComposite is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - roleName string
//   - roles []gocloak.Role
func (_e *MockGoCloak_Expecter) AddRealmRoleComposite(ctx interface{}, token interface{}, realm interface{}, roleName interface{}, roles interface{}) *MockGoCloak_AddRealmRoleComposite_Call {
	return &MockGoCloak_AddRealmRoleComposite_Call{Call: _e.mock.On("AddRealmRoleComposite", ctx, token, realm, roleName, roles)}
}

func (_c *MockGoCloak_AddRealmRoleComposite_Call) Run(run func(ctx context.Context, token string, realm string, roleName string, roles []gocloak.Role)) *MockGoCloak_AddRealmRoleComposite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]gocloak.Role))
	})
	return _c
}

func (_c *MockGoCloak_AddRealmRoleComposite_Call) Return(_a0 error) *MockGoCloak_AddRealmRoleComposite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoCloak_AddRealmRoleComposite_Call) RunAndReturn(run func(context.Context, string, string, string, []gocloak.Role) error) *MockGoCloak_AddRealmRoleComposite_Call {
	_c.Call.Return(run)
	return _c
}

// AddRealmRoleToGroup provides a mock function with given fields: ctx, token, realm, groupID, roles
func (_m *MockGoCloak) AddRealmRoleToGroup(ctx context.Context, token string, realm string, groupID string, roles []gocloak.Role) error {
	ret := _m.Called(ctx, token, realm, groupID, roles)

	if len(ret) == 0 {
		panic("no return value specified for AddRealmRoleToGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []gocloak.Role) error); ok {
		r0 = rf(ctx, token, realm, groupID, roles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoCloak_AddRealmRoleToGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRealmRoleToGroup'
type MockGoCloak_AddRealmRoleToGroup_Call struct {
	*mock.Call
}

// AddRealmRoleToGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - groupID string
//   - roles []gocloak.Role
func (_e *MockGoCloak_Expecter) AddRealmRoleToGroup(ctx interface{}, token interface{}, realm interface{}, groupID interface{}, roles interface{}) *MockGoCloak_AddRealmRoleToGroup_Call {
	return &MockGoCloak_AddRealmRoleToGroup_Call{Call: _e.mock.On("AddRealmRoleToGroup", ctx, token, realm, groupID, roles)}
}

func (_c *MockGoCloak_AddRealmRoleToGroup_Call) Run(run func(ctx context.Context, token string, realm string, groupID string, roles []gocloak.Role)) *MockGoCloak_AddRealmRoleToGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]gocloak.Role))
	})
	return _c
}

func (_c *MockGoCloak_AddRealmRoleToGroup_Call) Return(_a0 error) *MockGoCloak_AddRealmRoleToGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoCloak_AddRealmRoleToGroup_Call) RunAndReturn(run func(context.Context, string, string, string, []gocloak.Role) error) *MockGoCloak_AddRealmRoleToGroup_Call {
	_c.Call.Return(run)
	return _c
}

// AddRealmRoleToUser provides a mock function with given fields: ctx, token, realm, userID, roles
func (_m *MockGoCloak) AddRealmRoleToUser(ctx context.Context, token string, realm string, userID string, roles []gocloak.Role) error {
	ret := _m.Called(ctx, token, realm, userID, roles)

	if len(ret) == 0 {
		panic("no return value specified for AddRealmRoleToUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []gocloak.Role) error); ok {
		r0 = rf(ctx, token, realm, userID, roles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoCloak_AddRealmRoleToUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRealmRoleToUser'
type MockGoCloak_AddRealmRoleToUser_Call struct {
	*mock.Call
}

// AddRealmRoleToUser is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - userID string
//   - roles []gocloak.Role
func (_e *MockGoCloak_Expecter) AddRealmRoleToUser(ctx interface{}, token interface{}, realm interface{}, userID interface{}, roles interface{}) *MockGoCloak_AddRealmRoleToUser_Call {
	return &MockGoCloak_AddRealmRoleToUser_Call{Call: _e.mock.On("AddRealmRoleToUser", ctx, token, realm, userID, roles)}
}

func (_c *MockGoCloak_AddRealmRoleToUser_Call) Run(run func(ctx context.Context, token string, realm string, userID string, roles []gocloak.Role)) *MockGoCloak_AddRealmRoleToUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]gocloak.Role))
	})
	return _c
}

func (_c *MockGoCloak_AddRealmRoleToUser_Call) Return(_a0 error) *MockGoCloak_AddRealmRoleToUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoCloak_AddRealmRoleToUser_Call) RunAndReturn(run func(context.Context, string, string, string, []gocloak.Role) error) *MockGoCloak_AddRealmRoleToUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateChildGroup provides a mock function with given fields: ctx, token, realm, groupID, group
func (_m *MockGoCloak) CreateChildGroup(ctx context.Context, token string, realm string, groupID string, group gocloak.Group) (string, error) {
	ret := _m.Called(ctx, token, realm, groupID, group)

	if len(ret) == 0 {
		panic("no return value specified for CreateChildGroup")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gocloak.Group) (string, error)); ok {
		return rf(ctx, token, realm, groupID, group)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gocloak.Group) string); ok {
		r0 = rf(ctx, token, realm, groupID, group)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, gocloak.Group) error); ok {
		r1 = rf(ctx, token, realm, groupID, group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_CreateChildGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChildGroup'
type MockGoCloak_CreateChildGroup_Call struct {
	*mock.Call
}

// CreateChildGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - groupID string
//   - group gocloak.Group
func (_e *MockGoCloak_Expecter) CreateChildGroup(ctx interface{}, token interface{}, realm interface{}, groupID interface{}, group interface{}) *MockGoCloak_CreateChildGroup_Call {
	return &MockGoCloak_CreateChildGroup_Call{Call: _e.mock.On("CreateChildGroup", ctx, token, realm, groupID, group)}
}

func (_c *MockGoCloak_CreateChildGroup_Call) Run(run func(ctx context.Context, token string, realm string, groupID string, group gocloak.Group)) *MockGoCloak_CreateChildGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(gocloak.Group))
	})
	return _c
}

func (_c *MockGoCloak_CreateChildGroup_Call) Return(_a0 string, _a1 error) *MockGoCloak_CreateChildGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_CreateChildGroup_Call) RunAndReturn(run func(context.Context, string, string, string, gocloak.Group) (string, error)) *MockGoCloak_CreateChildGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateClient provides a mock function with given fields: ctx, accessToken, realm, clientID
func (_m *MockGoCloak) CreateClient(ctx context.Context, accessToken string, realm string, clientID gocloak.Client) (string, error) {
	ret := _m.Called(ctx, accessToken, realm, clientID)

	if len(ret) == 0 {
		panic("no return value specified for CreateClient")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, gocloak.Client) (string, error)); ok {
		return rf(ctx, accessToken, realm, clientID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, gocloak.Client) string); ok {
		r0 = rf(ctx, accessToken, realm, clientID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, gocloak.Client) error); ok {
		r1 = rf(ctx, accessToken, realm, clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_CreateClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClient'
type MockGoCloak_CreateClient_Call struct {
	*mock.Call
}

// CreateClient is a helper method to define mock.On call
//   - ctx context.Context
//   - accessToken string
//   - realm string
//   - clientID gocloak.Client
func (_e *MockGoCloak_Expecter) CreateClient(ctx interface{}, accessToken interface{}, realm interface{}, clientID interface{}) *MockGoCloak_CreateClient_Call {
	return &MockGoCloak_CreateClient_Call{Call: _e.mock.On("CreateClient", ctx, accessToken, realm, clientID)}
}

func (_c *MockGoCloak_CreateClient_Call) Run(run func(ctx context.Context, accessToken string, realm string, clientID gocloak.Client)) *MockGoCloak_CreateClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(gocloak.Client))
	})
	return _c
}

func (_c *MockGoCloak_CreateClient_Call) Return(_a0 string, _a1 error) *MockGoCloak_CreateClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_CreateClient_Call) RunAndReturn(run func(context.Context, string, string, gocloak.Client) (string, error)) *MockGoCloak_CreateClient_Call {
	_c.Call.Return(run)
	return _c
}

// CreateClientProtocolMapper provides a mock function with given fields: ctx, token, realm, clientID, mapper
func (_m *MockGoCloak) CreateClientProtocolMapper(ctx context.Context, token string, realm string, clientID string, mapper gocloak.ProtocolMapperRepresentation) (string, error) {
	ret := _m.Called(ctx, token, realm, clientID, mapper)

	if len(ret) == 0 {
		panic("no return value specified for CreateClientProtocolMapper")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gocloak.ProtocolMapperRepresentation) (string, error)); ok {
		return rf(ctx, token, realm, clientID, mapper)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gocloak.ProtocolMapperRepresentation) string); ok {
		r0 = rf(ctx, token, realm, clientID, mapper)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, gocloak.ProtocolMapperRepresentation) error); ok {
		r1 = rf(ctx, token, realm, clientID, mapper)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_CreateClientProtocolMapper_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClientProtocolMapper'
type MockGoCloak_CreateClientProtocolMapper_Call struct {
	*mock.Call
}

// CreateClientProtocolMapper is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - clientID string
//   - mapper gocloak.ProtocolMapperRepresentation
func (_e *MockGoCloak_Expecter) CreateClientProtocolMapper(ctx interface{}, token interface{}, realm interface{}, clientID interface{}, mapper interface{}) *MockGoCloak_CreateClientProtocolMapper_Call {
	return &MockGoCloak_CreateClientProtocolMapper_Call{Call: _e.mock.On("CreateClientProtocolMapper", ctx, token, realm, clientID, mapper)}
}

func (_c *MockGoCloak_CreateClientProtocolMapper_Call) Run(run func(ctx context.Context, token string, realm string, clientID string, mapper gocloak.ProtocolMapperRepresentation)) *MockGoCloak_CreateClientProtocolMapper_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(gocloak.ProtocolMapperRepresentation))
	})
	return _c
}

func (_c *MockGoCloak_CreateClientProtocolMapper_Call) Return(_a0 string, _a1 error) *MockGoCloak_CreateClientProtocolMapper_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_CreateClientProtocolMapper_Call) RunAndReturn(run func(context.Context, string, string, string, gocloak.ProtocolMapperRepresentation) (string, error)) *MockGoCloak_CreateClientProtocolMapper_Call {
	_c.Call.Return(run)
	return _c
}

// CreateClientRole provides a mock function with given fields: ctx, accessToken, realm, clientID, role
func (_m *MockGoCloak) CreateClientRole(ctx context.Context, accessToken string, realm string, clientID string, role gocloak.Role) (string, error) {
	ret := _m.Called(ctx, accessToken, realm, clientID, role)

	if len(ret) == 0 {
		panic("no return value specified for CreateClientRole")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gocloak.Role) (string, error)); ok {
		return rf(ctx, accessToken, realm, clientID, role)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gocloak.Role) string); ok {
		r0 = rf(ctx, accessToken, realm, clientID, role)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, gocloak.Role) error); ok {
		r1 = rf(ctx, accessToken, realm, clientID, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_CreateClientRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClientRole'
type MockGoCloak_CreateClientRole_Call struct {
	*mock.Call
}

// CreateClientRole is a helper method to define mock.On call
//   - ctx context.Context
//   - accessToken string
//   - realm string
//   - clientID string
//   - role gocloak.Role
func (_e *MockGoCloak_Expecter) CreateClientRole(ctx interface{}, accessToken interface{}, realm interface{}, clientID interface{}, role interface{}) *MockGoCloak_CreateClientRole_Call {
	return &MockGoCloak_CreateClientRole_Call{Call: _e.mock.On("CreateClientRole", ctx, accessToken, realm, clientID, role)}
}

func (_c *MockGoCloak_CreateClientRole_Call) Run(run func(ctx context.Context, accessToken string, realm string, clientID string, role gocloak.Role)) *MockGoCloak_CreateClientRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(gocloak.Role))
	})
	return _c
}

func (_c *MockGoCloak_CreateClientRole_Call) Return(_a0 string, _a1 error) *MockGoCloak_CreateClientRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_CreateClientRole_Call) RunAndReturn(run func(context.Context, string, string, string, gocloak.Role) (string, error)) *MockGoCloak_CreateClientRole_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroup provides a mock function with given fields: ctx, accessToken, realm, group
func (_m *MockGoCloak) CreateGroup(ctx context.Context, accessToken string, realm string, group gocloak.Group) (string, error) {
	ret := _m.Called(ctx, accessToken, realm, group)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, gocloak.Group) (string, error)); ok {
		return rf(ctx, accessToken, realm, group)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, gocloak.Group) string); ok {
		r0 = rf(ctx, accessToken, realm, group)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, gocloak.Group) error); ok {
		r1 = rf(ctx, accessToken, realm, group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_CreateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroup'
type MockGoCloak_CreateGroup_Call struct {
	*mock.Call
}

// CreateGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - accessToken string
//   - realm string
//   - group gocloak.Group
func (_e *MockGoCloak_Expecter) CreateGroup(ctx interface{}, accessToken interface{}, realm interface{}, group interface{}) *MockGoCloak_CreateGroup_Call {
	return &MockGoCloak_CreateGroup_Call{Call: _e.mock.On("CreateGroup", ctx, accessToken, realm, group)}
}

func (_c *MockGoCloak_CreateGroup_Call) Run(run func(ctx context.Context, accessToken string, realm string, group gocloak.Group)) *MockGoCloak_CreateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(gocloak.Group))
	})
	return _c
}

func (_c *MockGoCloak_CreateGroup_Call) Return(_a0 string, _a1 error) *MockGoCloak_CreateGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_CreateGroup_Call) RunAndReturn(run func(context.Context, string, string, gocloak.Group) (string, error)) *MockGoCloak_CreateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePermission provides a mock function with given fields: ctx, token, realm, idOfClient, permission
func (_m *MockGoCloak) CreatePermission(ctx context.Context, token string, realm string, idOfClient string, permission gocloak.PermissionRepresentation) (*gocloak.PermissionRepresentation, error) {
	ret := _m.Called(ctx, token, realm, idOfClient, permission)

	if len(ret) == 0 {
		panic("no return value specified for CreatePermission")
	}

	var r0 *gocloak.PermissionRepresentation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gocloak.PermissionRepresentation) (*gocloak.PermissionRepresentation, error)); ok {
		return rf(ctx, token, realm, idOfClient, permission)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gocloak.PermissionRepresentation) *gocloak.PermissionRepresentation); ok {
		r0 = rf(ctx, token, realm, idOfClient, permission)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocloak.PermissionRepresentation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, gocloak.PermissionRepresentation) error); ok {
		r1 = rf(ctx, token, realm, idOfClient, permission)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_CreatePermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePermission'
type MockGoCloak_CreatePermission_Call struct {
	*mock.Call
}

// CreatePermission is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - idOfClient string
//   - permission gocloak.PermissionRepresentation
func (_e *MockGoCloak_Expecter) CreatePermission(ctx interface{}, token interface{}, realm interface{}, idOfClient interface{}, permission interface{}) *MockGoCloak_CreatePermission_Call {
	return &MockGoCloak_CreatePermission_Call{Call: _e.mock.On("CreatePermission", ctx, token, realm, idOfClient, permission)}
}

func (_c *MockGoCloak_CreatePermission_Call) Run(run func(ctx context.Context, token string, realm string, idOfClient string, permission gocloak.PermissionRepresentation)) *MockGoCloak_CreatePermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(gocloak.PermissionRepresentation))
	})
	return _c
}

func (_c *MockGoCloak_CreatePermission_Call) Return(_a0 *gocloak.PermissionRepresentation, _a1 error) *MockGoCloak_CreatePermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_CreatePermission_Call) RunAndReturn(run func(context.Context, string, string, string, gocloak.PermissionRepresentation) (*gocloak.PermissionRepresentation, error)) *MockGoCloak_CreatePermission_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePolicy provides a mock function with given fields: ctx, token, realm, idOfClient, policy
func (_m *MockGoCloak) CreatePolicy(ctx context.Context, token string, realm string, idOfClient string, policy gocloak.PolicyRepresentation) (*gocloak.PolicyRepresentation, error) {
	ret := _m.Called(ctx, token, realm, idOfClient, policy)

	if len(ret) == 0 {
		panic("no return value specified for CreatePolicy")
	}

	var r0 *gocloak.PolicyRepresentation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gocloak.PolicyRepresentation) (*gocloak.PolicyRepresentation, error)); ok {
		return rf(ctx, token, realm, idOfClient, policy)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gocloak.PolicyRepresentation) *gocloak.PolicyRepresentation); ok {
		r0 = rf(ctx, token, realm, idOfClient, policy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocloak.PolicyRepresentation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, gocloak.PolicyRepresentation) error); ok {
		r1 = rf(ctx, token, realm, idOfClient, policy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_CreatePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePolicy'
type MockGoCloak_CreatePolicy_Call struct {
	*mock.Call
}

// CreatePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - idOfClient string
//   - policy gocloak.PolicyRepresentation
func (_e *MockGoCloak_Expecter) CreatePolicy(ctx interface{}, token interface{}, realm interface{}, idOfClient interface{}, policy interface{}) *MockGoCloak_CreatePolicy_Call {
	return &MockGoCloak_CreatePolicy_Call{Call: _e.mock.On("CreatePolicy", ctx, token, realm, idOfClient, policy)}
}

func (_c *MockGoCloak_CreatePolicy_Call) Run(run func(ctx context.Context, token string, realm string, idOfClient string, policy gocloak.PolicyRepresentation)) *MockGoCloak_CreatePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(gocloak.PolicyRepresentation))
	})
	return _c
}

func (_c *MockGoCloak_CreatePolicy_Call) Return(_a0 *gocloak.PolicyRepresentation, _a1 error) *MockGoCloak_CreatePolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_CreatePolicy_Call) RunAndReturn(run func(context.Context, string, string, string, gocloak.PolicyRepresentation) (*gocloak.PolicyRepresentation, error)) *MockGoCloak_CreatePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRealm provides a mock function with given fields: ctx, token, realm
func (_m *MockGoCloak) CreateRealm(ctx context.Context, token string, realm gocloak.RealmRepresentation) (string, error) {
	ret := _m.Called(ctx, token, realm)

	if len(ret) == 0 {
		panic("no return value specified for CreateRealm")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gocloak.RealmRepresentation) (string, error)); ok {
		return rf(ctx, token, realm)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gocloak.RealmRepresentation) string); ok {
		r0 = rf(ctx, token, realm)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gocloak.RealmRepresentation) error); ok {
		r1 = rf(ctx, token, realm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_CreateRealm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRealm'
type MockGoCloak_CreateRealm_Call struct {
	*mock.Call
}

// CreateRealm is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm gocloak.RealmRepresentation
func (_e *MockGoCloak_Expecter) CreateRealm(ctx interface{}, token interface{}, realm interface{}) *MockGoCloak_CreateRealm_Call {
	return &MockGoCloak_CreateRealm_Call{Call: _e.mock.On("CreateRealm", ctx, token, realm)}
}

func (_c *MockGoCloak_CreateRealm_Call) Run(run func(ctx context.Context, token string, realm gocloak.RealmRepresentation)) *MockGoCloak_CreateRealm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(gocloak.RealmRepresentation))
	})
	return _c
}

func (_c *MockGoCloak_CreateRealm_Call) Return(_a0 string, _a1 error) *MockGoCloak_CreateRealm_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_CreateRealm_Call) RunAndReturn(run func(context.Context, string, gocloak.RealmRepresentation) (string, error)) *MockGoCloak_CreateRealm_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRealmRole provides a mock function with given fields: ctx, token, realm, role
func (_m *MockGoCloak) CreateRealmRole(ctx context.Context, token string, realm string, role gocloak.Role) (string, error) {
	ret := _m.Called(ctx, token, realm, role)

	if len(ret) == 0 {
		panic("no return value specified for CreateRealmRole")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, gocloak.Role) (string, error)); ok {
		return rf(ctx, token, realm, role)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, gocloak.Role) string); ok {
		r0 = rf(ctx, token, realm, role)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, gocloak.Role) error); ok {
		r1 = rf(ctx, token, realm, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_CreateRealmRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRealmRole'
type MockGoCloak_CreateRealmRole_Call struct {
	*mock.Call
}

// CreateRealmRole is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - role gocloak.Role
func (_e *MockGoCloak_Expecter) CreateRealmRole(ctx interface{}, token interface{}, realm interface{}, role interface{}) *MockGoCloak_CreateRealmRole_Call {
	return &MockGoCloak_CreateRealmRole_Call{Call: _e.mock.On("CreateRealmRole", ctx, token, realm, role)}
}

func (_c *MockGoCloak_CreateRealmRole_Call) Run(run func(ctx context.Context, token string, realm string, role gocloak.Role)) *MockGoCloak_CreateRealmRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(gocloak.Role))
	})
	return _c
}

func (_c *MockGoCloak_CreateRealmRole_Call) Return(_a0 string, _a1 error) *MockGoCloak_CreateRealmRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_CreateRealmRole_Call) RunAndReturn(run func(context.Context, string, string, gocloak.Role) (string, error)) *MockGoCloak_CreateRealmRole_Call {
	_c.Call.Return(run)
	return _c
}

// CreateScope provides a mock function with given fields: ctx, token, realm, idOfClient, scope
func (_m *MockGoCloak) CreateScope(ctx context.Context, token string, realm string, idOfClient string, scope gocloak.ScopeRepresentation) (*gocloak.ScopeRepresentation, error) {
	ret := _m.Called(ctx, token, realm, idOfClient, scope)

	if len(ret) == 0 {
		panic("no return value specified for CreateScope")
	}

	var r0 *gocloak.ScopeRepresentation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gocloak.ScopeRepresentation) (*gocloak.ScopeRepresentation, error)); ok {
		return rf(ctx, token, realm, idOfClient, scope)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gocloak.ScopeRepresentation) *gocloak.ScopeRepresentation); ok {
		r0 = rf(ctx, token, realm, idOfClient, scope)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocloak.ScopeRepresentation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, gocloak.ScopeRepresentation) error); ok {
		r1 = rf(ctx, token, realm, idOfClient, scope)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_CreateScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateScope'
type MockGoCloak_CreateScope_Call struct {
	*mock.Call
}

// CreateScope is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - idOfClient string
//   - scope gocloak.ScopeRepresentation
func (_e *MockGoCloak_Expecter) CreateScope(ctx interface{}, token interface{}, realm interface{}, idOfClient interface{}, scope interface{}) *MockGoCloak_CreateScope_Call {
	return &MockGoCloak_CreateScope_Call{Call: _e.mock.On("CreateScope", ctx, token, realm, idOfClient, scope)}
}

func (_c *MockGoCloak_CreateScope_Call) Run(run func(ctx context.Context, token string, realm string, idOfClient string, scope gocloak.ScopeRepresentation)) *MockGoCloak_CreateScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(gocloak.ScopeRepresentation))
	})
	return _c
}

func (_c *MockGoCloak_CreateScope_Call) Return(_a0 *gocloak.ScopeRepresentation, _a1 error) *MockGoCloak_CreateScope_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_CreateScope_Call) RunAndReturn(run func(context.Context, string, string, string, gocloak.ScopeRepresentation) (*gocloak.ScopeRepresentation, error)) *MockGoCloak_CreateScope_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, token, realm, user
func (_m *MockGoCloak) CreateUser(ctx context.Context, token string, realm string, user gocloak.User) (string, error) {
	ret := _m.Called(ctx, token, realm, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, gocloak.User) (string, error)); ok {
		return rf(ctx, token, realm, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, gocloak.User) string); ok {
		r0 = rf(ctx, token, realm, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, gocloak.User) error); ok {
		r1 = rf(ctx, token, realm, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockGoCloak_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - user gocloak.User
func (_e *MockGoCloak_Expecter) CreateUser(ctx interface{}, token interface{}, realm interface{}, user interface{}) *MockGoCloak_CreateUser_Call {
	return &MockGoCloak_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, token, realm, user)}
}

func (_c *MockGoCloak_CreateUser_Call) Run(run func(ctx context.Context, token string, realm string, user gocloak.User)) *MockGoCloak_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(gocloak.User))
	})
	return _c
}

func (_c *MockGoCloak_CreateUser_Call) Return(_a0 string, _a1 error) *MockGoCloak_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_CreateUser_Call) RunAndReturn(run func(context.Context, string, string, gocloak.User) (string, error)) *MockGoCloak_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClient provides a mock function with given fields: ctx, accessToken, realm, clientID
func (_m *MockGoCloak) DeleteClient(ctx context.Context, accessToken string, realm string, clientID string) error {
	ret := _m.Called(ctx, accessToken, realm, clientID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, accessToken, realm, clientID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoCloak_DeleteClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClient'
type MockGoCloak_DeleteClient_Call struct {
	*mock.Call
}

// DeleteClient is a helper method to define mock.On call
//   - ctx context.Context
//   - accessToken string
//   - realm string
//   - clientID string
func (_e *MockGoCloak_Expecter) DeleteClient(ctx interface{}, accessToken interface{}, realm interface{}, clientID interface{}) *MockGoCloak_DeleteClient_Call {
	return &MockGoCloak_DeleteClient_Call{Call: _e.mock.On("DeleteClient", ctx, accessToken, realm, clientID)}
}

func (_c *MockGoCloak_DeleteClient_Call) Run(run func(ctx context.Context, accessToken string, realm string, clientID string)) *MockGoCloak_DeleteClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockGoCloak_DeleteClient_Call) Return(_a0 error) *MockGoCloak_DeleteClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoCloak_DeleteClient_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockGoCloak_DeleteClient_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClientProtocolMapper provides a mock function with given fields: ctx, token, realm, clientID, mapperID
func (_m *MockGoCloak) DeleteClientProtocolMapper(ctx context.Context, token string, realm string, clientID string, mapperID string) error {
	ret := _m.Called(ctx, token, realm, clientID, mapperID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClientProtocolMapper")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, token, realm, clientID, mapperID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoCloak_DeleteClientProtocolMapper_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClientProtocolMapper'
type MockGoCloak_DeleteClientProtocolMapper_Call struct {
	*mock.Call
}

// DeleteClientProtocolMapper is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - clientID string
//   - mapperID string
func (_e *MockGoCloak_Expecter) DeleteClientProtocolMapper(ctx interface{}, token interface{}, realm interface{}, clientID interface{}, mapperID interface{}) *MockGoCloak_DeleteClientProtocolMapper_Call {
	return &MockGoCloak_DeleteClientProtocolMapper_Call{Call: _e.mock.On("DeleteClientProtocolMapper", ctx, token, realm, clientID, mapperID)}
}

func (_c *MockGoCloak_DeleteClientProtocolMapper_Call) Run(run func(ctx context.Context, token string, realm string, clientID string, mapperID string)) *MockGoCloak_DeleteClientProtocolMapper_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockGoCloak_DeleteClientProtocolMapper_Call) Return(_a0 error) *MockGoCloak_DeleteClientProtocolMapper_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoCloak_DeleteClientProtocolMapper_Call) RunAndReturn(run func(context.Context, string, string, string, string) error) *MockGoCloak_DeleteClientProtocolMapper_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClientRoleFromGroup provides a mock function with given fields: ctx, token, realm, clientID, groupID, roles
func (_m *MockGoCloak) DeleteClientRoleFromGroup(ctx context.Context, token string, realm string, clientID string, groupID string, roles []gocloak.Role) error {
	ret := _m.Called(ctx, token, realm, clientID, groupID, roles)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClientRoleFromGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []gocloak.Role) error); ok {
		r0 = rf(ctx, token, realm, clientID, groupID, roles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoCloak_DeleteClientRoleFromGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClientRoleFromGroup'
type MockGoCloak_DeleteClientRoleFromGroup_Call struct {
	*mock.Call
}

// DeleteClientRoleFromGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - clientID string
//   - groupID string
//   - roles []gocloak.Role
func (_e *MockGoCloak_Expecter) DeleteClientRoleFromGroup(ctx interface{}, token interface{}, realm interface{}, clientID interface{}, groupID interface{}, roles interface{}) *MockGoCloak_DeleteClientRoleFromGroup_Call {
	return &MockGoCloak_DeleteClientRoleFromGroup_Call{Call: _e.mock.On("DeleteClientRoleFromGroup", ctx, token, realm, clientID, groupID, roles)}
}

func (_c *MockGoCloak_DeleteClientRoleFromGroup_Call) Run(run func(ctx context.Context, token string, realm string, clientID string, groupID string, roles []gocloak.Role)) *MockGoCloak_DeleteClientRoleFromGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].([]gocloak.Role))
	})
	return _c
}

func (_c *MockGoCloak_DeleteClientRoleFromGroup_Call) Return(_a0 error) *MockGoCloak_DeleteClientRoleFromGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoCloak_DeleteClientRoleFromGroup_Call) RunAndReturn(run func(context.Context, string, string, string, string, []gocloak.Role) error) *MockGoCloak_DeleteClientRoleFromGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClientRoleFromUser provides a mock function with given fields: ctx, token, realm, clientID, userID, roles
func (_m *MockGoCloak) DeleteClientRoleFromUser(ctx context.Context, token string, realm string, clientID string, userID string, roles []gocloak.Role) error {
	ret := _m.Called(ctx, token, realm, clientID, userID, roles)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClientRoleFromUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []gocloak.Role) error); ok {
		r0 = rf(ctx, token, realm, clientID, userID, roles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoCloak_DeleteClientRoleFromUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClientRoleFromUser'
type MockGoCloak_DeleteClientRoleFromUser_Call struct {
	*mock.Call
}

// DeleteClientRoleFromUser is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - clientID string
//   - userID string
//   - roles []gocloak.Role
func (_e *MockGoCloak_Expecter) DeleteClientRoleFromUser(ctx interface{}, token interface{}, realm interface{}, clientID interface{}, userID interface{}, roles interface{}) *MockGoCloak_DeleteClientRoleFromUser_Call {
	return &MockGoCloak_DeleteClientRoleFromUser_Call{Call: _e.mock.On("DeleteClientRoleFromUser", ctx, token, realm, clientID, userID, roles)}
}

func (_c *MockGoCloak_DeleteClientRoleFromUser_Call) Run(run func(ctx context.Context, token string, realm string, clientID string, userID string, roles []gocloak.Role)) *MockGoCloak_DeleteClientRoleFromUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].([]gocloak.Role))
	})
	return _c
}

func (_c *MockGoCloak_DeleteClientRoleFromUser_Call) Return(_a0 error) *MockGoCloak_DeleteClientRoleFromUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoCloak_DeleteClientRoleFromUser_Call) RunAndReturn(run func(context.Context, string, string, string, string, []gocloak.Role) error) *MockGoCloak_DeleteClientRoleFromUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClientScope provides a mock function with given fields: ctx, accessToken, realm, scopeID
func (_m *MockGoCloak) DeleteClientScope(ctx context.Context, accessToken string, realm string, scopeID string) error {
	ret := _m.Called(ctx, accessToken, realm, scopeID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClientScope")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, accessToken, realm, scopeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoCloak_DeleteClientScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClientScope'
type MockGoCloak_DeleteClientScope_Call struct {
	*mock.Call
}

// DeleteClientScope is a helper method to define mock.On call
//   - ctx context.Context
//   - accessToken string
//   - realm string
//   - scopeID string
func (_e *MockGoCloak_Expecter) DeleteClientScope(ctx interface{}, accessToken interface{}, realm interface{}, scopeID interface{}) *MockGoCloak_DeleteClientScope_Call {
	return &MockGoCloak_DeleteClientScope_Call{Call: _e.mock.On("DeleteClientScope", ctx, accessToken, realm, scopeID)}
}

func (_c *MockGoCloak_DeleteClientScope_Call) Run(run func(ctx context.Context, accessToken string, realm string, scopeID string)) *MockGoCloak_DeleteClientScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockGoCloak_DeleteClientScope_Call) Return(_a0 error) *MockGoCloak_DeleteClientScope_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoCloak_DeleteClientScope_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockGoCloak_DeleteClientScope_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroup provides a mock function with given fields: ctx, accessToken, realm, groupID
func (_m *MockGoCloak) DeleteGroup(ctx context.Context, accessToken string, realm string, groupID string) error {
	ret := _m.Called(ctx, accessToken, realm, groupID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, accessToken, realm, groupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoCloak_DeleteGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroup'
type MockGoCloak_DeleteGroup_Call struct {
	*mock.Call
}

// DeleteGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - accessToken string
//   - realm string
//   - groupID string
func (_e *MockGoCloak_Expecter) DeleteGroup(ctx interface{}, accessToken interface{}, realm interface{}, groupID interface{}) *MockGoCloak_DeleteGroup_Call {
	return &MockGoCloak_DeleteGroup_Call{Call: _e.mock.On("DeleteGroup", ctx, accessToken, realm, groupID)}
}

func (_c *MockGoCloak_DeleteGroup_Call) Run(run func(ctx context.Context, accessToken string, realm string, groupID string)) *MockGoCloak_DeleteGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockGoCloak_DeleteGroup_Call) Return(_a0 error) *MockGoCloak_DeleteGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoCloak_DeleteGroup_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockGoCloak_DeleteGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePermission provides a mock function with given fields: ctx, token, realm, idOfClient, permissionID
func (_m *MockGoCloak) DeletePermission(ctx context.Context, token string, realm string, idOfClient string, permissionID string) error {
	ret := _m.Called(ctx, token, realm, idOfClient, permissionID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePermission")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, token, realm, idOfClient, permissionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoCloak_DeletePermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePermission'
type MockGoCloak_DeletePermission_Call struct {
	*mock.Call
}

// DeletePermission is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - idOfClient string
//   - permissionID string
func (_e *MockGoCloak_Expecter) DeletePermission(ctx interface{}, token interface{}, realm interface{}, idOfClient interface{}, permissionID interface{}) *MockGoCloak_DeletePermission_Call {
	return &MockGoCloak_DeletePermission_Call{Call: _e.mock.On("DeletePermission", ctx, token, realm, idOfClient, permissionID)}
}

func (_c *MockGoCloak_DeletePermission_Call) Run(run func(ctx context.Context, token string, realm string, idOfClient string, permissionID string)) *MockGoCloak_DeletePermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockGoCloak_DeletePermission_Call) Return(_a0 error) *MockGoCloak_DeletePermission_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoCloak_DeletePermission_Call) RunAndReturn(run func(context.Context, string, string, string, string) error) *MockGoCloak_DeletePermission_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePolicy provides a mock function with given fields: ctx, token, realm, idOfClient, policyID
func (_m *MockGoCloak) DeletePolicy(ctx context.Context, token string, realm string, idOfClient string, policyID string) error {
	ret := _m.Called(ctx, token, realm, idOfClient, policyID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, token, realm, idOfClient, policyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoCloak_DeletePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePolicy'
type MockGoCloak_DeletePolicy_Call struct {
	*mock.Call
}

// DeletePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - idOfClient string
//   - policyID string
func (_e *MockGoCloak_Expecter) DeletePolicy(ctx interface{}, token interface{}, realm interface{}, idOfClient interface{}, policyID interface{}) *MockGoCloak_DeletePolicy_Call {
	return &MockGoCloak_DeletePolicy_Call{Call: _e.mock.On("DeletePolicy", ctx, token, realm, idOfClient, policyID)}
}

func (_c *MockGoCloak_DeletePolicy_Call) Run(run func(ctx context.Context, token string, realm string, idOfClient string, policyID string)) *MockGoCloak_DeletePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockGoCloak_DeletePolicy_Call) Return(_a0 error) *MockGoCloak_DeletePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoCloak_DeletePolicy_Call) RunAndReturn(run func(context.Context, string, string, string, string) error) *MockGoCloak_DeletePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRealm provides a mock function with given fields: ctx, token, realm
func (_m *MockGoCloak) DeleteRealm(ctx context.Context, token string, realm string) error {
	ret := _m.Called(ctx, token, realm)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRealm")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, token, realm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoCloak_DeleteRealm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRealm'
type MockGoCloak_DeleteRealm_Call struct {
	*mock.Call
}

// DeleteRealm is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
func (_e *MockGoCloak_Expecter) DeleteRealm(ctx interface{}, token interface{}, realm interface{}) *MockGoCloak_DeleteRealm_Call {
	return &MockGoCloak_DeleteRealm_Call{Call: _e.mock.On("DeleteRealm", ctx, token, realm)}
}

func (_c *MockGoCloak_DeleteRealm_Call) Run(run func(ctx context.Context, token string, realm string)) *MockGoCloak_DeleteRealm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGoCloak_DeleteRealm_Call) Return(_a0 error) *MockGoCloak_DeleteRealm_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoCloak_DeleteRealm_Call) RunAndReturn(run func(context.Context, string, string) error) *MockGoCloak_DeleteRealm_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRealmRole provides a mock function with given fields: ctx, token, realm, roleName
func (_m *MockGoCloak) DeleteRealmRole(ctx context.Context, token string, realm string, roleName string) error {
	ret := _m.Called(ctx, token, realm, roleName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRealmRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, token, realm, roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoCloak_DeleteRealmRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRealmRole'
type MockGoCloak_DeleteRealmRole_Call struct {
	*mock.Call
}

// DeleteRealmRole is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - roleName string
func (_e *MockGoCloak_Expecter) DeleteRealmRole(ctx interface{}, token interface{}, realm interface{}, roleName interface{}) *MockGoCloak_DeleteRealmRole_Call {
	return &MockGoCloak_DeleteRealmRole_Call{Call: _e.mock.On("DeleteRealmRole", ctx, token, realm, roleName)}
}

func (_c *MockGoCloak_DeleteRealmRole_Call) Run(run func(ctx context.Context, token string, realm string, roleName string)) *MockGoCloak_DeleteRealmRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockGoCloak_DeleteRealmRole_Call) Return(_a0 error) *MockGoCloak_DeleteRealmRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoCloak_DeleteRealmRole_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockGoCloak_DeleteRealmRole_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRealmRoleComposite provides a mock function with given fields: ctx, token, realm, roleName, roles
func (_m *MockGoCloak) DeleteRealmRoleComposite(ctx context.Context, token string, realm string, roleName string, roles []gocloak.Role) error {
	ret := _m.Called(ctx, token, realm, roleName, roles)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRealmRoleComposite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []gocloak.Role) error); ok {
		r0 = rf(ctx, token, realm, roleName, roles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoCloak_DeleteRealmRoleComposite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRealmRoleComposite'
type MockGoCloak_DeleteRealmRoleComposite_Call struct {
	*mock.Call
}

// DeleteRealmRoleComposite is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - roleName string
//   - roles []gocloak.Role
func (_e *MockGoCloak_Expecter) DeleteRealmRoleComposite(ctx interface{}, token interface{}, realm interface{}, roleName interface{}, roles interface{}) *MockGoCloak_DeleteRealmRoleComposite_Call {
	return &MockGoCloak_DeleteRealmRoleComposite_Call{Call: _e.mock.On("DeleteRealmRoleComposite", ctx, token, realm, roleName, roles)}
}

func (_c *MockGoCloak_DeleteRealmRoleComposite_Call) Run(run func(ctx context.Context, token string, realm string, roleName string, roles []gocloak.Role)) *MockGoCloak_DeleteRealmRoleComposite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]gocloak.Role))
	})
	return _c
}

func (_c *MockGoCloak_DeleteRealmRoleComposite_Call) Return(_a0 error) *MockGoCloak_DeleteRealmRoleComposite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoCloak_DeleteRealmRoleComposite_Call) RunAndReturn(run func(context.Context, string, string, string, []gocloak.Role) error) *MockGoCloak_DeleteRealmRoleComposite_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRealmRoleFromGroup provides a mock function with given fields: ctx, token, realm, groupID, roles
func (_m *MockGoCloak) DeleteRealmRoleFromGroup(ctx context.Context, token string, realm string, groupID string, roles []gocloak.Role) error {
	ret := _m.Called(ctx, token, realm, groupID, roles)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRealmRoleFromGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []gocloak.Role) error); ok {
		r0 = rf(ctx, token, realm, groupID, roles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoCloak_DeleteRealmRoleFromGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRealmRoleFromGroup'
type MockGoCloak_DeleteRealmRoleFromGroup_Call struct {
	*mock.Call
}

// DeleteRealmRoleFromGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - groupID string
//   - roles []gocloak.Role
func (_e *MockGoCloak_Expecter) DeleteRealmRoleFromGroup(ctx interface{}, token interface{}, realm interface{}, groupID interface{}, roles interface{}) *MockGoCloak_DeleteRealmRoleFromGroup_Call {
	return &MockGoCloak_DeleteRealmRoleFromGroup_Call{Call: _e.mock.On("DeleteRealmRoleFromGroup", ctx, token, realm, groupID, roles)}
}

func (_c *MockGoCloak_DeleteRealmRoleFromGroup_Call) Run(run func(ctx context.Context, token string, realm string, groupID string, roles []gocloak.Role)) *MockGoCloak_DeleteRealmRoleFromGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]gocloak.Role))
	})
	return _c
}

func (_c *MockGoCloak_DeleteRealmRoleFromGroup_Call) Return(_a0 error) *MockGoCloak_DeleteRealmRoleFromGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoCloak_DeleteRealmRoleFromGroup_Call) RunAndReturn(run func(context.Context, string, string, string, []gocloak.Role) error) *MockGoCloak_DeleteRealmRoleFromGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRealmRoleFromUser provides a mock function with given fields: ctx, token, realm, userID, roles
func (_m *MockGoCloak) DeleteRealmRoleFromUser(ctx context.Context, token string, realm string, userID string, roles []gocloak.Role) error {
	ret := _m.Called(ctx, token, realm, userID, roles)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRealmRoleFromUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []gocloak.Role) error); ok {
		r0 = rf(ctx, token, realm, userID, roles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoCloak_DeleteRealmRoleFromUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRealmRoleFromUser'
type MockGoCloak_DeleteRealmRoleFromUser_Call struct {
	*mock.Call
}

// DeleteRealmRoleFromUser is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - userID string
//   - roles []gocloak.Role
func (_e *MockGoCloak_Expecter) DeleteRealmRoleFromUser(ctx interface{}, token interface{}, realm interface{}, userID interface{}, roles interface{}) *MockGoCloak_DeleteRealmRoleFromUser_Call {
	return &MockGoCloak_DeleteRealmRoleFromUser_Call{Call: _e.mock.On("DeleteRealmRoleFromUser", ctx, token, realm, userID, roles)}
}

func (_c *MockGoCloak_DeleteRealmRoleFromUser_Call) Run(run func(ctx context.Context, token string, realm string, userID string, roles []gocloak.Role)) *MockGoCloak_DeleteRealmRoleFromUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]gocloak.Role))
	})
	return _c
}

func (_c *MockGoCloak_DeleteRealmRoleFromUser_Call) Return(_a0 error) *MockGoCloak_DeleteRealmRoleFromUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoCloak_DeleteRealmRoleFromUser_Call) RunAndReturn(run func(context.Context, string, string, string, []gocloak.Role) error) *MockGoCloak_DeleteRealmRoleFromUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteScope provides a mock function with given fields: ctx, token, realm, idOfClient, scopeID
func (_m *MockGoCloak) DeleteScope(ctx context.Context, token string, realm string, idOfClient string, scopeID string) error {
	ret := _m.Called(ctx, token, realm, idOfClient, scopeID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteScope")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, token, realm, idOfClient, scopeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoCloak_DeleteScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteScope'
type MockGoCloak_DeleteScope_Call struct {
	*mock.Call
}

// DeleteScope is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - idOfClient string
//   - scopeID string
func (_e *MockGoCloak_Expecter) DeleteScope(ctx interface{}, token interface{}, realm interface{}, idOfClient interface{}, scopeID interface{}) *MockGoCloak_DeleteScope_Call {
	return &MockGoCloak_DeleteScope_Call{Call: _e.mock.On("DeleteScope", ctx, token, realm, idOfClient, scopeID)}
}

func (_c *MockGoCloak_DeleteScope_Call) Run(run func(ctx context.Context, token string, realm string, idOfClient string, scopeID string)) *MockGoCloak_DeleteScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockGoCloak_DeleteScope_Call) Return(_a0 error) *MockGoCloak_DeleteScope_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoCloak_DeleteScope_Call) RunAndReturn(run func(context.Context, string, string, string, string) error) *MockGoCloak_DeleteScope_Call {
	_c.Call.Return(run)
	return _c
}

// GetClientRole provides a mock function with given fields: ctx, token, realm, clientID, roleName
func (_m *MockGoCloak) GetClientRole(ctx context.Context, token string, realm string, clientID string, roleName string) (*gocloak.Role, error) {
	ret := _m.Called(ctx, token, realm, clientID, roleName)

	if len(ret) == 0 {
		panic("no return value specified for GetClientRole")
	}

	var r0 *gocloak.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (*gocloak.Role, error)); ok {
		return rf(ctx, token, realm, clientID, roleName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *gocloak.Role); ok {
		r0 = rf(ctx, token, realm, clientID, roleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocloak.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, token, realm, clientID, roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_GetClientRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClientRole'
type MockGoCloak_GetClientRole_Call struct {
	*mock.Call
}

// GetClientRole is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - clientID string
//   - roleName string
func (_e *MockGoCloak_Expecter) GetClientRole(ctx interface{}, token interface{}, realm interface{}, clientID interface{}, roleName interface{}) *MockGoCloak_GetClientRole_Call {
	return &MockGoCloak_GetClientRole_Call{Call: _e.mock.On("GetClientRole", ctx, token, realm, clientID, roleName)}
}

func (_c *MockGoCloak_GetClientRole_Call) Run(run func(ctx context.Context, token string, realm string, clientID string, roleName string)) *MockGoCloak_GetClientRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockGoCloak_GetClientRole_Call) Return(_a0 *gocloak.Role, _a1 error) *MockGoCloak_GetClientRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_GetClientRole_Call) RunAndReturn(run func(context.Context, string, string, string, string) (*gocloak.Role, error)) *MockGoCloak_GetClientRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetClientRoles provides a mock function with given fields: ctx, accessToken, realm, clientID, params
func (_m *MockGoCloak) GetClientRoles(ctx context.Context, accessToken string, realm string, clientID string, params gocloak.GetRoleParams) ([]*gocloak.Role, error) {
	ret := _m.Called(ctx, accessToken, realm, clientID, params)

	if len(ret) == 0 {
		panic("no return value specified for GetClientRoles")
	}

	var r0 []*gocloak.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gocloak.GetRoleParams) ([]*gocloak.Role, error)); ok {
		return rf(ctx, accessToken, realm, clientID, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gocloak.GetRoleParams) []*gocloak.Role); ok {
		r0 = rf(ctx, accessToken, realm, clientID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gocloak.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, gocloak.GetRoleParams) error); ok {
		r1 = rf(ctx, accessToken, realm, clientID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_GetClientRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClientRoles'
type MockGoCloak_GetClientRoles_Call struct {
	*mock.Call
}

// GetClientRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - accessToken string
//   - realm string
//   - clientID string
//   - params gocloak.GetRoleParams
func (_e *MockGoCloak_Expecter) GetClientRoles(ctx interface{}, accessToken interface{}, realm interface{}, clientID interface{}, params interface{}) *MockGoCloak_GetClientRoles_Call {
	return &MockGoCloak_GetClientRoles_Call{Call: _e.mock.On("GetClientRoles", ctx, accessToken, realm, clientID, params)}
}

func (_c *MockGoCloak_GetClientRoles_Call) Run(run func(ctx context.Context, accessToken string, realm string, clientID string, params gocloak.GetRoleParams)) *MockGoCloak_GetClientRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(gocloak.GetRoleParams))
	})
	return _c
}

func (_c *MockGoCloak_GetClientRoles_Call) Return(_a0 []*gocloak.Role, _a1 error) *MockGoCloak_GetClientRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_GetClientRoles_Call) RunAndReturn(run func(context.Context, string, string, string, gocloak.GetRoleParams) ([]*gocloak.Role, error)) *MockGoCloak_GetClientRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetClientScope provides a mock function with given fields: ctx, token, realm, scopeID
func (_m *MockGoCloak) GetClientScope(ctx context.Context, token string, realm string, scopeID string) (*gocloak.ClientScope, error) {
	ret := _m.Called(ctx, token, realm, scopeID)

	if len(ret) == 0 {
		panic("no return value specified for GetClientScope")
	}

	var r0 *gocloak.ClientScope
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*gocloak.ClientScope, error)); ok {
		return rf(ctx, token, realm, scopeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *gocloak.ClientScope); ok {
		r0 = rf(ctx, token, realm, scopeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocloak.ClientScope)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, token, realm, scopeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_GetClientScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClientScope'
type MockGoCloak_GetClientScope_Call struct {
	*mock.Call
}

// GetClientScope is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - scopeID string
func (_e *MockGoCloak_Expecter) GetClientScope(ctx interface{}, token interface{}, realm interface{}, scopeID interface{}) *MockGoCloak_GetClientScope_Call {
	return &MockGoCloak_GetClientScope_Call{Call: _e.mock.On("GetClientScope", ctx, token, realm, scopeID)}
}

func (_c *MockGoCloak_GetClientScope_Call) Run(run func(ctx context.Context, token string, realm string, scopeID string)) *MockGoCloak_GetClientScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockGoCloak_GetClientScope_Call) Return(_a0 *gocloak.ClientScope, _a1 error) *MockGoCloak_GetClientScope_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_GetClientScope_Call) RunAndReturn(run func(context.Context, string, string, string) (*gocloak.ClientScope, error)) *MockGoCloak_GetClientScope_Call {
	_c.Call.Return(run)
	return _c
}

// GetClientScopes provides a mock function with given fields: ctx, token, realm
func (_m *MockGoCloak) GetClientScopes(ctx context.Context, token string, realm string) ([]*gocloak.ClientScope, error) {
	ret := _m.Called(ctx, token, realm)

	if len(ret) == 0 {
		panic("no return value specified for GetClientScopes")
	}

	var r0 []*gocloak.ClientScope
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*gocloak.ClientScope, error)); ok {
		return rf(ctx, token, realm)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*gocloak.ClientScope); ok {
		r0 = rf(ctx, token, realm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gocloak.ClientScope)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, token, realm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_GetClientScopes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClientScopes'
type MockGoCloak_GetClientScopes_Call struct {
	*mock.Call
}

// GetClientScopes is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
func (_e *MockGoCloak_Expecter) GetClientScopes(ctx interface{}, token interface{}, realm interface{}) *MockGoCloak_GetClientScopes_Call {
	return &MockGoCloak_GetClientScopes_Call{Call: _e.mock.On("GetClientScopes", ctx, token, realm)}
}

func (_c *MockGoCloak_GetClientScopes_Call) Run(run func(ctx context.Context, token string, realm string)) *MockGoCloak_GetClientScopes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGoCloak_GetClientScopes_Call) Return(_a0 []*gocloak.ClientScope, _a1 error) *MockGoCloak_GetClientScopes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_GetClientScopes_Call) RunAndReturn(run func(context.Context, string, string) ([]*gocloak.ClientScope, error)) *MockGoCloak_GetClientScopes_Call {
	_c.Call.Return(run)
	return _c
}

// GetClientServiceAccount provides a mock function with given fields: ctx, token, realm, clientID
func (_m *MockGoCloak) GetClientServiceAccount(ctx context.Context, token string, realm string, clientID string) (*gocloak.User, error) {
	ret := _m.Called(ctx, token, realm, clientID)

	if len(ret) == 0 {
		panic("no return value specified for GetClientServiceAccount")
	}

	var r0 *gocloak.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*gocloak.User, error)); ok {
		return rf(ctx, token, realm, clientID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *gocloak.User); ok {
		r0 = rf(ctx, token, realm, clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocloak.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, token, realm, clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_GetClientServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClientServiceAccount'
type MockGoCloak_GetClientServiceAccount_Call struct {
	*mock.Call
}

// GetClientServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - clientID string
func (_e *MockGoCloak_Expecter) GetClientServiceAccount(ctx interface{}, token interface{}, realm interface{}, clientID interface{}) *MockGoCloak_GetClientServiceAccount_Call {
	return &MockGoCloak_GetClientServiceAccount_Call{Call: _e.mock.On("GetClientServiceAccount", ctx, token, realm, clientID)}
}

func (_c *MockGoCloak_GetClientServiceAccount_Call) Run(run func(ctx context.Context, token string, realm string, clientID string)) *MockGoCloak_GetClientServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockGoCloak_GetClientServiceAccount_Call) Return(_a0 *gocloak.User, _a1 error) *MockGoCloak_GetClientServiceAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_GetClientServiceAccount_Call) RunAndReturn(run func(context.Context, string, string, string) (*gocloak.User, error)) *MockGoCloak_GetClientServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetClients provides a mock function with given fields: ctx, accessToken, realm, params
func (_m *MockGoCloak) GetClients(ctx context.Context, accessToken string, realm string, params gocloak.GetClientsParams) ([]*gocloak.Client, error) {
	ret := _m.Called(ctx, accessToken, realm, params)

	if len(ret) == 0 {
		panic("no return value specified for GetClients")
	}

	var r0 []*gocloak.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, gocloak.GetClientsParams) ([]*gocloak.Client, error)); ok {
		return rf(ctx, accessToken, realm, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, gocloak.GetClientsParams) []*gocloak.Client); ok {
		r0 = rf(ctx, accessToken, realm, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gocloak.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, gocloak.GetClientsParams) error); ok {
		r1 = rf(ctx, accessToken, realm, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_GetClients_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClients'
type MockGoCloak_GetClients_Call struct {
	*mock.Call
}

// GetClients is a helper method to define mock.On call
//   - ctx context.Context
//   - accessToken string
//   - realm string
//   - params gocloak.GetClientsParams
func (_e *MockGoCloak_Expecter) GetClients(ctx interface{}, accessToken interface{}, realm interface{}, params interface{}) *MockGoCloak_GetClients_Call {
	return &MockGoCloak_GetClients_Call{Call: _e.mock.On("GetClients", ctx, accessToken, realm, params)}
}

func (_c *MockGoCloak_GetClients_Call) Run(run func(ctx context.Context, accessToken string, realm string, params gocloak.GetClientsParams)) *MockGoCloak_GetClients_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(gocloak.GetClientsParams))
	})
	return _c
}

func (_c *MockGoCloak_GetClients_Call) Return(_a0 []*gocloak.Client, _a1 error) *MockGoCloak_GetClients_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_GetClients_Call) RunAndReturn(run func(context.Context, string, string, gocloak.GetClientsParams) ([]*gocloak.Client, error)) *MockGoCloak_GetClients_Call {
	_c.Call.Return(run)
	return _c
}

// GetClientsDefaultScopes provides a mock function with given fields: ctx, token, realm, clientID
func (_m *MockGoCloak) GetClientsDefaultScopes(ctx context.Context, token string, realm string, clientID string) ([]*gocloak.ClientScope, error) {
	ret := _m.Called(ctx, token, realm, clientID)

	if len(ret) == 0 {
		panic("no return value specified for GetClientsDefaultScopes")
	}

	var r0 []*gocloak.ClientScope
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ([]*gocloak.ClientScope, error)); ok {
		return rf(ctx, token, realm, clientID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []*gocloak.ClientScope); ok {
		r0 = rf(ctx, token, realm, clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gocloak.ClientScope)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, token, realm, clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_GetClientsDefaultScopes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClientsDefaultScopes'
type MockGoCloak_GetClientsDefaultScopes_Call struct {
	*mock.Call
}

// GetClientsDefaultScopes is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - clientID string
func (_e *MockGoCloak_Expecter) GetClientsDefaultScopes(ctx interface{}, token interface{}, realm interface{}, clientID interface{}) *MockGoCloak_GetClientsDefaultScopes_Call {
	return &MockGoCloak_GetClientsDefaultScopes_Call{Call: _e.mock.On("GetClientsDefaultScopes", ctx, token, realm, clientID)}
}

func (_c *MockGoCloak_GetClientsDefaultScopes_Call) Run(run func(ctx context.Context, token string, realm string, clientID string)) *MockGoCloak_GetClientsDefaultScopes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockGoCloak_GetClientsDefaultScopes_Call) Return(_a0 []*gocloak.ClientScope, _a1 error) *MockGoCloak_GetClientsDefaultScopes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_GetClientsDefaultScopes_Call) RunAndReturn(run func(context.Context, string, string, string) ([]*gocloak.ClientScope, error)) *MockGoCloak_GetClientsDefaultScopes_Call {
	_c.Call.Return(run)
	return _c
}

// GetCompositeRolesByRoleID provides a mock function with given fields: ctx, token, realm, roleID
func (_m *MockGoCloak) GetCompositeRolesByRoleID(ctx context.Context, token string, realm string, roleID string) ([]*gocloak.Role, error) {
	ret := _m.Called(ctx, token, realm, roleID)

	if len(ret) == 0 {
		panic("no return value specified for GetCompositeRolesByRoleID")
	}

	var r0 []*gocloak.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ([]*gocloak.Role, error)); ok {
		return rf(ctx, token, realm, roleID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []*gocloak.Role); ok {
		r0 = rf(ctx, token, realm, roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gocloak.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, token, realm, roleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_GetCompositeRolesByRoleID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCompositeRolesByRoleID'
type MockGoCloak_GetCompositeRolesByRoleID_Call struct {
	*mock.Call
}

// GetCompositeRolesByRoleID is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - roleID string
func (_e *MockGoCloak_Expecter) GetCompositeRolesByRoleID(ctx interface{}, token interface{}, realm interface{}, roleID interface{}) *MockGoCloak_GetCompositeRolesByRoleID_Call {
	return &MockGoCloak_GetCompositeRolesByRoleID_Call{Call: _e.mock.On("GetCompositeRolesByRoleID", ctx, token, realm, roleID)}
}

func (_c *MockGoCloak_GetCompositeRolesByRoleID_Call) Run(run func(ctx context.Context, token string, realm string, roleID string)) *MockGoCloak_GetCompositeRolesByRoleID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockGoCloak_GetCompositeRolesByRoleID_Call) Return(_a0 []*gocloak.Role, _a1 error) *MockGoCloak_GetCompositeRolesByRoleID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_GetCompositeRolesByRoleID_Call) RunAndReturn(run func(context.Context, string, string, string) ([]*gocloak.Role, error)) *MockGoCloak_GetCompositeRolesByRoleID_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroups provides a mock function with given fields: ctx, accessToken, realm, params
func (_m *MockGoCloak) GetGroups(ctx context.Context, accessToken string, realm string, params gocloak.GetGroupsParams) ([]*gocloak.Group, error) {
	ret := _m.Called(ctx, accessToken, realm, params)

	if len(ret) == 0 {
		panic("no return value specified for GetGroups")
	}

	var r0 []*gocloak.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, gocloak.GetGroupsParams) ([]*gocloak.Group, error)); ok {
		return rf(ctx, accessToken, realm, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, gocloak.GetGroupsParams) []*gocloak.Group); ok {
		r0 = rf(ctx, accessToken, realm, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gocloak.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, gocloak.GetGroupsParams) error); ok {
		r1 = rf(ctx, accessToken, realm, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_GetGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroups'
type MockGoCloak_GetGroups_Call struct {
	*mock.Call
}

// GetGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - accessToken string
//   - realm string
//   - params gocloak.GetGroupsParams
func (_e *MockGoCloak_Expecter) GetGroups(ctx interface{}, accessToken interface{}, realm interface{}, params interface{}) *MockGoCloak_GetGroups_Call {
	return &MockGoCloak_GetGroups_Call{Call: _e.mock.On("GetGroups", ctx, accessToken, realm, params)}
}

func (_c *MockGoCloak_GetGroups_Call) Run(run func(ctx context.Context, accessToken string, realm string, params gocloak.GetGroupsParams)) *MockGoCloak_GetGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(gocloak.GetGroupsParams))
	})
	return _c
}

func (_c *MockGoCloak_GetGroups_Call) Return(_a0 []*gocloak.Group, _a1 error) *MockGoCloak_GetGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_GetGroups_Call) RunAndReturn(run func(context.Context, string, string, gocloak.GetGroupsParams) ([]*gocloak.Group, error)) *MockGoCloak_GetGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissions provides a mock function with given fields: ctx, token, realm, idOfClient, params
func (_m *MockGoCloak) GetPermissions(ctx context.Context, token string, realm string, idOfClient string, params gocloak.GetPermissionParams) ([]*gocloak.PermissionRepresentation, error) {
	ret := _m.Called(ctx, token, realm, idOfClient, params)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissions")
	}

	var r0 []*gocloak.PermissionRepresentation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gocloak.GetPermissionParams) ([]*gocloak.PermissionRepresentation, error)); ok {
		return rf(ctx, token, realm, idOfClient, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gocloak.GetPermissionParams) []*gocloak.PermissionRepresentation); ok {
		r0 = rf(ctx, token, realm, idOfClient, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gocloak.PermissionRepresentation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, gocloak.GetPermissionParams) error); ok {
		r1 = rf(ctx, token, realm, idOfClient, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_GetPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissions'
type MockGoCloak_GetPermissions_Call struct {
	*mock.Call
}

// GetPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - idOfClient string
//   - params gocloak.GetPermissionParams
func (_e *MockGoCloak_Expecter) GetPermissions(ctx interface{}, token interface{}, realm interface{}, idOfClient interface{}, params interface{}) *MockGoCloak_GetPermissions_Call {
	return &MockGoCloak_GetPermissions_Call{Call: _e.mock.On("GetPermissions", ctx, token, realm, idOfClient, params)}
}

func (_c *MockGoCloak_GetPermissions_Call) Run(run func(ctx context.Context, token string, realm string, idOfClient string, params gocloak.GetPermissionParams)) *MockGoCloak_GetPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(gocloak.GetPermissionParams))
	})
	return _c
}

func (_c *MockGoCloak_GetPermissions_Call) Return(_a0 []*gocloak.PermissionRepresentation, _a1 error) *MockGoCloak_GetPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_GetPermissions_Call) RunAndReturn(run func(context.Context, string, string, string, gocloak.GetPermissionParams) ([]*gocloak.PermissionRepresentation, error)) *MockGoCloak_GetPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicies provides a mock function with given fields: ctx, token, realm, idOfClient, params
func (_m *MockGoCloak) GetPolicies(ctx context.Context, token string, realm string, idOfClient string, params gocloak.GetPolicyParams) ([]*gocloak.PolicyRepresentation, error) {
	ret := _m.Called(ctx, token, realm, idOfClient, params)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicies")
	}

	var r0 []*gocloak.PolicyRepresentation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gocloak.GetPolicyParams) ([]*gocloak.PolicyRepresentation, error)); ok {
		return rf(ctx, token, realm, idOfClient, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gocloak.GetPolicyParams) []*gocloak.PolicyRepresentation); ok {
		r0 = rf(ctx, token, realm, idOfClient, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gocloak.PolicyRepresentation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, gocloak.GetPolicyParams) error); ok {
		r1 = rf(ctx, token, realm, idOfClient, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_GetPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicies'
type MockGoCloak_GetPolicies_Call struct {
	*mock.Call
}

// GetPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - idOfClient string
//   - params gocloak.GetPolicyParams
func (_e *MockGoCloak_Expecter) GetPolicies(ctx interface{}, token interface{}, realm interface{}, idOfClient interface{}, params interface{}) *MockGoCloak_GetPolicies_Call {
	return &MockGoCloak_GetPolicies_Call{Call: _e.mock.On("GetPolicies", ctx, token, realm, idOfClient, params)}
}

func (_c *MockGoCloak_GetPolicies_Call) Run(run func(ctx context.Context, token string, realm string, idOfClient string, params gocloak.GetPolicyParams)) *MockGoCloak_GetPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(gocloak.GetPolicyParams))
	})
	return _c
}

func (_c *MockGoCloak_GetPolicies_Call) Return(_a0 []*gocloak.PolicyRepresentation, _a1 error) *MockGoCloak_GetPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_GetPolicies_Call) RunAndReturn(run func(context.Context, string, string, string, gocloak.GetPolicyParams) ([]*gocloak.PolicyRepresentation, error)) *MockGoCloak_GetPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// GetRealm provides a mock function with given fields: ctx, token, realm
func (_m *MockGoCloak) GetRealm(ctx context.Context, token string, realm string) (*gocloak.RealmRepresentation, error) {
	ret := _m.Called(ctx, token, realm)

	if len(ret) == 0 {
		panic("no return value specified for GetRealm")
	}

	var r0 *gocloak.RealmRepresentation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*gocloak.RealmRepresentation, error)); ok {
		return rf(ctx, token, realm)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *gocloak.RealmRepresentation); ok {
		r0 = rf(ctx, token, realm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocloak.RealmRepresentation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, token, realm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_GetRealm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRealm'
type MockGoCloak_GetRealm_Call struct {
	*mock.Call
}

// GetRealm is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
func (_e *MockGoCloak_Expecter) GetRealm(ctx interface{}, token interface{}, realm interface{}) *MockGoCloak_GetRealm_Call {
	return &MockGoCloak_GetRealm_Call{Call: _e.mock.On("GetRealm", ctx, token, realm)}
}

func (_c *MockGoCloak_GetRealm_Call) Run(run func(ctx context.Context, token string, realm string)) *MockGoCloak_GetRealm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGoCloak_GetRealm_Call) Return(_a0 *gocloak.RealmRepresentation, _a1 error) *MockGoCloak_GetRealm_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_GetRealm_Call) RunAndReturn(run func(context.Context, string, string) (*gocloak.RealmRepresentation, error)) *MockGoCloak_GetRealm_Call {
	_c.Call.Return(run)
	return _c
}

// GetRealmRole provides a mock function with given fields: ctx, token, realm, roleName
func (_m *MockGoCloak) GetRealmRole(ctx context.Context, token string, realm string, roleName string) (*gocloak.Role, error) {
	ret := _m.Called(ctx, token, realm, roleName)

	if len(ret) == 0 {
		panic("no return value specified for GetRealmRole")
	}

	var r0 *gocloak.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*gocloak.Role, error)); ok {
		return rf(ctx, token, realm, roleName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *gocloak.Role); ok {
		r0 = rf(ctx, token, realm, roleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocloak.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, token, realm, roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_GetRealmRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRealmRole'
type MockGoCloak_GetRealmRole_Call struct {
	*mock.Call
}

// GetRealmRole is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - roleName string
func (_e *MockGoCloak_Expecter) GetRealmRole(ctx interface{}, token interface{}, realm interface{}, roleName interface{}) *MockGoCloak_GetRealmRole_Call {
	return &MockGoCloak_GetRealmRole_Call{Call: _e.mock.On("GetRealmRole", ctx, token, realm, roleName)}
}

func (_c *MockGoCloak_GetRealmRole_Call) Run(run func(ctx context.Context, token string, realm string, roleName string)) *MockGoCloak_GetRealmRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockGoCloak_GetRealmRole_Call) Return(_a0 *gocloak.Role, _a1 error) *MockGoCloak_GetRealmRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_GetRealmRole_Call) RunAndReturn(run func(context.Context, string, string, string) (*gocloak.Role, error)) *MockGoCloak_GetRealmRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetRealmRoles provides a mock function with given fields: ctx, token, realm, params
func (_m *MockGoCloak) GetRealmRoles(ctx context.Context, token string, realm string, params gocloak.GetRoleParams) ([]*gocloak.Role, error) {
	ret := _m.Called(ctx, token, realm, params)

	if len(ret) == 0 {
		panic("no return value specified for GetRealmRoles")
	}

	var r0 []*gocloak.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, gocloak.GetRoleParams) ([]*gocloak.Role, error)); ok {
		return rf(ctx, token, realm, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, gocloak.GetRoleParams) []*gocloak.Role); ok {
		r0 = rf(ctx, token, realm, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gocloak.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, gocloak.GetRoleParams) error); ok {
		r1 = rf(ctx, token, realm, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_GetRealmRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRealmRoles'
type MockGoCloak_GetRealmRoles_Call struct {
	*mock.Call
}

// GetRealmRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - params gocloak.GetRoleParams
func (_e *MockGoCloak_Expecter) GetRealmRoles(ctx interface{}, token interface{}, realm interface{}, params interface{}) *MockGoCloak_GetRealmRoles_Call {
	return &MockGoCloak_GetRealmRoles_Call{Call: _e.mock.On("GetRealmRoles", ctx, token, realm, params)}
}

func (_c *MockGoCloak_GetRealmRoles_Call) Run(run func(ctx context.Context, token string, realm string, params gocloak.GetRoleParams)) *MockGoCloak_GetRealmRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(gocloak.GetRoleParams))
	})
	return _c
}

func (_c *MockGoCloak_GetRealmRoles_Call) Return(_a0 []*gocloak.Role, _a1 error) *MockGoCloak_GetRealmRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_GetRealmRoles_Call) RunAndReturn(run func(context.Context, string, string, gocloak.GetRoleParams) ([]*gocloak.Role, error)) *MockGoCloak_GetRealmRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetResources provides a mock function with given fields: ctx, token, realm, idOfClient, params
func (_m *MockGoCloak) GetResources(ctx context.Context, token string, realm string, idOfClient string, params gocloak.GetResourceParams) ([]*gocloak.ResourceRepresentation, error) {
	ret := _m.Called(ctx, token, realm, idOfClient, params)

	if len(ret) == 0 {
		panic("no return value specified for GetResources")
	}

	var r0 []*gocloak.ResourceRepresentation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gocloak.GetResourceParams) ([]*gocloak.ResourceRepresentation, error)); ok {
		return rf(ctx, token, realm, idOfClient, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gocloak.GetResourceParams) []*gocloak.ResourceRepresentation); ok {
		r0 = rf(ctx, token, realm, idOfClient, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gocloak.ResourceRepresentation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, gocloak.GetResourceParams) error); ok {
		r1 = rf(ctx, token, realm, idOfClient, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_GetResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResources'
type MockGoCloak_GetResources_Call struct {
	*mock.Call
}

// GetResources is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - idOfClient string
//   - params gocloak.GetResourceParams
func (_e *MockGoCloak_Expecter) GetResources(ctx interface{}, token interface{}, realm interface{}, idOfClient interface{}, params interface{}) *MockGoCloak_GetResources_Call {
	return &MockGoCloak_GetResources_Call{Call: _e.mock.On("GetResources", ctx, token, realm, idOfClient, params)}
}

func (_c *MockGoCloak_GetResources_Call) Run(run func(ctx context.Context, token string, realm string, idOfClient string, params gocloak.GetResourceParams)) *MockGoCloak_GetResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(gocloak.GetResourceParams))
	})
	return _c
}

func (_c *MockGoCloak_GetResources_Call) Return(_a0 []*gocloak.ResourceRepresentation, _a1 error) *MockGoCloak_GetResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_GetResources_Call) RunAndReturn(run func(context.Context, string, string, string, gocloak.GetResourceParams) ([]*gocloak.ResourceRepresentation, error)) *MockGoCloak_GetResources_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleMappingByGroupID provides a mock function with given fields: ctx, accessToken, realm, groupID
func (_m *MockGoCloak) GetRoleMappingByGroupID(ctx context.Context, accessToken string, realm string, groupID string) (*gocloak.MappingsRepresentation, error) {
	ret := _m.Called(ctx, accessToken, realm, groupID)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleMappingByGroupID")
	}

	var r0 *gocloak.MappingsRepresentation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*gocloak.MappingsRepresentation, error)); ok {
		return rf(ctx, accessToken, realm, groupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *gocloak.MappingsRepresentation); ok {
		r0 = rf(ctx, accessToken, realm, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocloak.MappingsRepresentation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, accessToken, realm, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_GetRoleMappingByGroupID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleMappingByGroupID'
type MockGoCloak_GetRoleMappingByGroupID_Call struct {
	*mock.Call
}

// GetRoleMappingByGroupID is a helper method to define mock.On call
//   - ctx context.Context
//   - accessToken string
//   - realm string
//   - groupID string
func (_e *MockGoCloak_Expecter) GetRoleMappingByGroupID(ctx interface{}, accessToken interface{}, realm interface{}, groupID interface{}) *MockGoCloak_GetRoleMappingByGroupID_Call {
	return &MockGoCloak_GetRoleMappingByGroupID_Call{Call: _e.mock.On("GetRoleMappingByGroupID", ctx, accessToken, realm, groupID)}
}

func (_c *MockGoCloak_GetRoleMappingByGroupID_Call) Run(run func(ctx context.Context, accessToken string, realm string, groupID string)) *MockGoCloak_GetRoleMappingByGroupID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockGoCloak_GetRoleMappingByGroupID_Call) Return(_a0 *gocloak.MappingsRepresentation, _a1 error) *MockGoCloak_GetRoleMappingByGroupID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_GetRoleMappingByGroupID_Call) RunAndReturn(run func(context.Context, string, string, string) (*gocloak.MappingsRepresentation, error)) *MockGoCloak_GetRoleMappingByGroupID_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleMappingByUserID provides a mock function with given fields: ctx, accessToken, realm, userID
func (_m *MockGoCloak) GetRoleMappingByUserID(ctx context.Context, accessToken string, realm string, userID string) (*gocloak.MappingsRepresentation, error) {
	ret := _m.Called(ctx, accessToken, realm, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleMappingByUserID")
	}

	var r0 *gocloak.MappingsRepresentation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*gocloak.MappingsRepresentation, error)); ok {
		return rf(ctx, accessToken, realm, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *gocloak.MappingsRepresentation); ok {
		r0 = rf(ctx, accessToken, realm, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocloak.MappingsRepresentation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, accessToken, realm, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_GetRoleMappingByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleMappingByUserID'
type MockGoCloak_GetRoleMappingByUserID_Call struct {
	*mock.Call
}

// GetRoleMappingByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - accessToken string
//   - realm string
//   - userID string
func (_e *MockGoCloak_Expecter) GetRoleMappingByUserID(ctx interface{}, accessToken interface{}, realm interface{}, userID interface{}) *MockGoCloak_GetRoleMappingByUserID_Call {
	return &MockGoCloak_GetRoleMappingByUserID_Call{Call: _e.mock.On("GetRoleMappingByUserID", ctx, accessToken, realm, userID)}
}

func (_c *MockGoCloak_GetRoleMappingByUserID_Call) Run(run func(ctx context.Context, accessToken string, realm string, userID string)) *MockGoCloak_GetRoleMappingByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockGoCloak_GetRoleMappingByUserID_Call) Return(_a0 *gocloak.MappingsRepresentation, _a1 error) *MockGoCloak_GetRoleMappingByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_GetRoleMappingByUserID_Call) RunAndReturn(run func(context.Context, string, string, string) (*gocloak.MappingsRepresentation, error)) *MockGoCloak_GetRoleMappingByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetScopes provides a mock function with given fields: ctx, token, realm, idOfClient, params
func (_m *MockGoCloak) GetScopes(ctx context.Context, token string, realm string, idOfClient string, params gocloak.GetScopeParams) ([]*gocloak.ScopeRepresentation, error) {
	ret := _m.Called(ctx, token, realm, idOfClient, params)

	if len(ret) == 0 {
		panic("no return value specified for GetScopes")
	}

	var r0 []*gocloak.ScopeRepresentation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gocloak.GetScopeParams) ([]*gocloak.ScopeRepresentation, error)); ok {
		return rf(ctx, token, realm, idOfClient, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gocloak.GetScopeParams) []*gocloak.ScopeRepresentation); ok {
		r0 = rf(ctx, token, realm, idOfClient, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gocloak.ScopeRepresentation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, gocloak.GetScopeParams) error); ok {
		r1 = rf(ctx, token, realm, idOfClient, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_GetScopes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScopes'
type MockGoCloak_GetScopes_Call struct {
	*mock.Call
}

// GetScopes is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - idOfClient string
//   - params gocloak.GetScopeParams
func (_e *MockGoCloak_Expecter) GetScopes(ctx interface{}, token interface{}, realm interface{}, idOfClient interface{}, params interface{}) *MockGoCloak_GetScopes_Call {
	return &MockGoCloak_GetScopes_Call{Call: _e.mock.On("GetScopes", ctx, token, realm, idOfClient, params)}
}

func (_c *MockGoCloak_GetScopes_Call) Run(run func(ctx context.Context, token string, realm string, idOfClient string, params gocloak.GetScopeParams)) *MockGoCloak_GetScopes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(gocloak.GetScopeParams))
	})
	return _c
}

func (_c *MockGoCloak_GetScopes_Call) Return(_a0 []*gocloak.ScopeRepresentation, _a1 error) *MockGoCloak_GetScopes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_GetScopes_Call) RunAndReturn(run func(context.Context, string, string, string, gocloak.GetScopeParams) ([]*gocloak.ScopeRepresentation, error)) *MockGoCloak_GetScopes_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with given fields: ctx, accessToken, realm, params
func (_m *MockGoCloak) GetUsers(ctx context.Context, accessToken string, realm string, params gocloak.GetUsersParams) ([]*gocloak.User, error) {
	ret := _m.Called(ctx, accessToken, realm, params)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []*gocloak.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, gocloak.GetUsersParams) ([]*gocloak.User, error)); ok {
		return rf(ctx, accessToken, realm, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, gocloak.GetUsersParams) []*gocloak.User); ok {
		r0 = rf(ctx, accessToken, realm, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gocloak.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, gocloak.GetUsersParams) error); ok {
		r1 = rf(ctx, accessToken, realm, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type MockGoCloak_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - accessToken string
//   - realm string
//   - params gocloak.GetUsersParams
func (_e *MockGoCloak_Expecter) GetUsers(ctx interface{}, accessToken interface{}, realm interface{}, params interface{}) *MockGoCloak_GetUsers_Call {
	return &MockGoCloak_GetUsers_Call{Call: _e.mock.On("GetUsers", ctx, accessToken, realm, params)}
}

func (_c *MockGoCloak_GetUsers_Call) Run(run func(ctx context.Context, accessToken string, realm string, params gocloak.GetUsersParams)) *MockGoCloak_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(gocloak.GetUsersParams))
	})
	return _c
}

func (_c *MockGoCloak_GetUsers_Call) Return(_a0 []*gocloak.User, _a1 error) *MockGoCloak_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_GetUsers_Call) RunAndReturn(run func(context.Context, string, string, gocloak.GetUsersParams) ([]*gocloak.User, error)) *MockGoCloak_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// LoginAdmin provides a mock function with given fields: ctx, username, password, realm
func (_m *MockGoCloak) LoginAdmin(ctx context.Context, username string, password string, realm string) (*gocloak.JWT, error) {
	ret := _m.Called(ctx, username, password, realm)

	if len(ret) == 0 {
		panic("no return value specified for LoginAdmin")
	}

	var r0 *gocloak.JWT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*gocloak.JWT, error)); ok {
		return rf(ctx, username, password, realm)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *gocloak.JWT); ok {
		r0 = rf(ctx, username, password, realm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocloak.JWT)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, username, password, realm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGoCloak_LoginAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginAdmin'
type MockGoCloak_LoginAdmin_Call struct {
	*mock.Call
}

// LoginAdmin is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password string
//   - realm string
func (_e *MockGoCloak_Expecter) LoginAdmin(ctx interface{}, username interface{}, password interface{}, realm interface{}) *MockGoCloak_LoginAdmin_Call {
	return &MockGoCloak_LoginAdmin_Call{Call: _e.mock.On("LoginAdmin", ctx, username, password, realm)}
}

func (_c *MockGoCloak_LoginAdmin_Call) Run(run func(ctx context.Context, username string, password string, realm string)) *MockGoCloak_LoginAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockGoCloak_LoginAdmin_Call) Return(_a0 *gocloak.JWT, _a1 error) *MockGoCloak_LoginAdmin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGoCloak_LoginAdmin_Call) RunAndReturn(run func(context.Context, string, string, string) (*gocloak.JWT, error)) *MockGoCloak_LoginAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// RestyClient provides a mock function with given fields:
func (_m *MockGoCloak) RestyClient() *resty.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RestyClient")
	}

	var r0 *resty.Client
	if rf, ok := ret.Get(0).(func() *resty.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resty.Client)
		}
	}

	return r0
}

// MockGoCloak_RestyClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestyClient'
type MockGoCloak_RestyClient_Call struct {
	*mock.Call
}

// RestyClient is a helper method to define mock.On call
func (_e *MockGoCloak_Expecter) RestyClient() *MockGoCloak_RestyClient_Call {
	return &MockGoCloak_RestyClient_Call{Call: _e.mock.On("RestyClient")}
}

func (_c *MockGoCloak_RestyClient_Call) Run(run func()) *MockGoCloak_RestyClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGoCloak_RestyClient_Call) Return(_a0 *resty.Client) *MockGoCloak_RestyClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoCloak_RestyClient_Call) RunAndReturn(run func() *resty.Client) *MockGoCloak_RestyClient_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClient provides a mock function with given fields: ctx, accessToken, realm, updatedClient
func (_m *MockGoCloak) UpdateClient(ctx context.Context, accessToken string, realm string, updatedClient gocloak.Client) error {
	ret := _m.Called(ctx, accessToken, realm, updatedClient)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, gocloak.Client) error); ok {
		r0 = rf(ctx, accessToken, realm, updatedClient)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoCloak_UpdateClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClient'
type MockGoCloak_UpdateClient_Call struct {
	*mock.Call
}

// UpdateClient is a helper method to define mock.On call
//   - ctx context.Context
//   - accessToken string
//   - realm string
//   - updatedClient gocloak.Client
func (_e *MockGoCloak_Expecter) UpdateClient(ctx interface{}, accessToken interface{}, realm interface{}, updatedClient interface{}) *MockGoCloak_UpdateClient_Call {
	return &MockGoCloak_UpdateClient_Call{Call: _e.mock.On("UpdateClient", ctx, accessToken, realm, updatedClient)}
}

func (_c *MockGoCloak_UpdateClient_Call) Run(run func(ctx context.Context, accessToken string, realm string, updatedClient gocloak.Client)) *MockGoCloak_UpdateClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(gocloak.Client))
	})
	return _c
}

func (_c *MockGoCloak_UpdateClient_Call) Return(_a0 error) *MockGoCloak_UpdateClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoCloak_UpdateClient_Call) RunAndReturn(run func(context.Context, string, string, gocloak.Client) error) *MockGoCloak_UpdateClient_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClientProtocolMapper provides a mock function with given fields: ctx, token, realm, clientID, mapperID, mapper
func (_m *MockGoCloak) UpdateClientProtocolMapper(ctx context.Context, token string, realm string, clientID string, mapperID string, mapper gocloak.ProtocolMapperRepresentation) error {
	ret := _m.Called(ctx, token, realm, clientID, mapperID, mapper)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClientProtocolMapper")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, gocloak.ProtocolMapperRepresentation) error); ok {
		r0 = rf(ctx, token, realm, clientID, mapperID, mapper)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoCloak_UpdateClientProtocolMapper_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClientProtocolMapper'
type MockGoCloak_UpdateClientProtocolMapper_Call struct {
	*mock.Call
}

// UpdateClientProtocolMapper is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - clientID string
//   - mapperID string
//   - mapper gocloak.ProtocolMapperRepresentation
func (_e *MockGoCloak_Expecter) UpdateClientProtocolMapper(ctx interface{}, token interface{}, realm interface{}, clientID interface{}, mapperID interface{}, mapper interface{}) *MockGoCloak_UpdateClientProtocolMapper_Call {
	return &MockGoCloak_UpdateClientProtocolMapper_Call{Call: _e.mock.On("UpdateClientProtocolMapper", ctx, token, realm, clientID, mapperID, mapper)}
}

func (_c *MockGoCloak_UpdateClientProtocolMapper_Call) Run(run func(ctx context.Context, token string, realm string, clientID string, mapperID string, mapper gocloak.ProtocolMapperRepresentation)) *MockGoCloak_UpdateClientProtocolMapper_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(gocloak.ProtocolMapperRepresentation))
	})
	return _c
}

func (_c *MockGoCloak_UpdateClientProtocolMapper_Call) Return(_a0 error) *MockGoCloak_UpdateClientProtocolMapper_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoCloak_UpdateClientProtocolMapper_Call) RunAndReturn(run func(context.Context, string, string, string, string, gocloak.ProtocolMapperRepresentation) error) *MockGoCloak_UpdateClientProtocolMapper_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroup provides a mock function with given fields: ctx, accessToken, realm, updatedGroup
func (_m *MockGoCloak) UpdateGroup(ctx context.Context, accessToken string, realm string, updatedGroup gocloak.Group) error {
	ret := _m.Called(ctx, accessToken, realm, updatedGroup)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, gocloak.Group) error); ok {
		r0 = rf(ctx, accessToken, realm, updatedGroup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoCloak_UpdateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroup'
type MockGoCloak_UpdateGroup_Call struct {
	*mock.Call
}

// UpdateGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - accessToken string
//   - realm string
//   - updatedGroup gocloak.Group
func (_e *MockGoCloak_Expecter) UpdateGroup(ctx interface{}, accessToken interface{}, realm interface{}, updatedGroup interface{}) *MockGoCloak_UpdateGroup_Call {
	return &MockGoCloak_UpdateGroup_Call{Call: _e.mock.On("UpdateGroup", ctx, accessToken, realm, updatedGroup)}
}

func (_c *MockGoCloak_UpdateGroup_Call) Run(run func(ctx context.Context, accessToken string, realm string, updatedGroup gocloak.Group)) *MockGoCloak_UpdateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(gocloak.Group))
	})
	return _c
}

func (_c *MockGoCloak_UpdateGroup_Call) Return(_a0 error) *MockGoCloak_UpdateGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoCloak_UpdateGroup_Call) RunAndReturn(run func(context.Context, string, string, gocloak.Group) error) *MockGoCloak_UpdateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePermission provides a mock function with given fields: ctx, token, realm, idOfClient, permission
func (_m *MockGoCloak) UpdatePermission(ctx context.Context, token string, realm string, idOfClient string, permission gocloak.PermissionRepresentation) error {
	ret := _m.Called(ctx, token, realm, idOfClient, permission)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePermission")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gocloak.PermissionRepresentation) error); ok {
		r0 = rf(ctx, token, realm, idOfClient, permission)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoCloak_UpdatePermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePermission'
type MockGoCloak_UpdatePermission_Call struct {
	*mock.Call
}

// UpdatePermission is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - idOfClient string
//   - permission gocloak.PermissionRepresentation
func (_e *MockGoCloak_Expecter) UpdatePermission(ctx interface{}, token interface{}, realm interface{}, idOfClient interface{}, permission interface{}) *MockGoCloak_UpdatePermission_Call {
	return &MockGoCloak_UpdatePermission_Call{Call: _e.mock.On("UpdatePermission", ctx, token, realm, idOfClient, permission)}
}

func (_c *MockGoCloak_UpdatePermission_Call) Run(run func(ctx context.Context, token string, realm string, idOfClient string, permission gocloak.PermissionRepresentation)) *MockGoCloak_UpdatePermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(gocloak.PermissionRepresentation))
	})
	return _c
}

func (_c *MockGoCloak_UpdatePermission_Call) Return(_a0 error) *MockGoCloak_UpdatePermission_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoCloak_UpdatePermission_Call) RunAndReturn(run func(context.Context, string, string, string, gocloak.PermissionRepresentation) error) *MockGoCloak_UpdatePermission_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePolicy provides a mock function with given fields: ctx, token, realm, idOfClient, policy
func (_m *MockGoCloak) UpdatePolicy(ctx context.Context, token string, realm string, idOfClient string, policy gocloak.PolicyRepresentation) error {
	ret := _m.Called(ctx, token, realm, idOfClient, policy)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gocloak.PolicyRepresentation) error); ok {
		r0 = rf(ctx, token, realm, idOfClient, policy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoCloak_UpdatePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePolicy'
type MockGoCloak_UpdatePolicy_Call struct {
	*mock.Call
}

// UpdatePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - idOfClient string
//   - policy gocloak.PolicyRepresentation
func (_e *MockGoCloak_Expecter) UpdatePolicy(ctx interface{}, token interface{}, realm interface{}, idOfClient interface{}, policy interface{}) *MockGoCloak_UpdatePolicy_Call {
	return &MockGoCloak_UpdatePolicy_Call{Call: _e.mock.On("UpdatePolicy", ctx, token, realm, idOfClient, policy)}
}

func (_c *MockGoCloak_UpdatePolicy_Call) Run(run func(ctx context.Context, token string, realm string, idOfClient string, policy gocloak.PolicyRepresentation)) *MockGoCloak_UpdatePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(gocloak.PolicyRepresentation))
	})
	return _c
}

func (_c *MockGoCloak_UpdatePolicy_Call) Return(_a0 error) *MockGoCloak_UpdatePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoCloak_UpdatePolicy_Call) RunAndReturn(run func(context.Context, string, string, string, gocloak.PolicyRepresentation) error) *MockGoCloak_UpdatePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRealm provides a mock function with given fields: ctx, token, realm
func (_m *MockGoCloak) UpdateRealm(ctx context.Context, token string, realm gocloak.RealmRepresentation) error {
	ret := _m.Called(ctx, token, realm)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRealm")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gocloak.RealmRepresentation) error); ok {
		r0 = rf(ctx, token, realm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoCloak_UpdateRealm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRealm'
type MockGoCloak_UpdateRealm_Call struct {
	*mock.Call
}

// UpdateRealm is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm gocloak.RealmRepresentation
func (_e *MockGoCloak_Expecter) UpdateRealm(ctx interface{}, token interface{}, realm interface{}) *MockGoCloak_UpdateRealm_Call {
	return &MockGoCloak_UpdateRealm_Call{Call: _e.mock.On("UpdateRealm", ctx, token, realm)}
}

func (_c *MockGoCloak_UpdateRealm_Call) Run(run func(ctx context.Context, token string, realm gocloak.RealmRepresentation)) *MockGoCloak_UpdateRealm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(gocloak.RealmRepresentation))
	})
	return _c
}

func (_c *MockGoCloak_UpdateRealm_Call) Return(_a0 error) *MockGoCloak_UpdateRealm_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoCloak_UpdateRealm_Call) RunAndReturn(run func(context.Context, string, gocloak.RealmRepresentation) error) *MockGoCloak_UpdateRealm_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRealmRole provides a mock function with given fields: ctx, token, realm, roleName, role
func (_m *MockGoCloak) UpdateRealmRole(ctx context.Context, token string, realm string, roleName string, role gocloak.Role) error {
	ret := _m.Called(ctx, token, realm, roleName, role)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRealmRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, gocloak.Role) error); ok {
		r0 = rf(ctx, token, realm, roleName, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoCloak_UpdateRealmRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRealmRole'
type MockGoCloak_UpdateRealmRole_Call struct {
	*mock.Call
}

// UpdateRealmRole is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - realm string
//   - roleName string
//   - role gocloak.Role
func (_e *MockGoCloak_Expecter) UpdateRealmRole(ctx interface{}, token interface{}, realm interface{}, roleName interface{}, role interface{}) *MockGoCloak_UpdateRealmRole_Call {
	return &MockGoCloak_UpdateRealmRole_Call{Call: _e.mock.On("UpdateRealmRole", ctx, token, realm, roleName, role)}
}

func (_c *MockGoCloak_UpdateRealmRole_Call) Run(run func(ctx context.Context, token string, realm string, roleName string, role gocloak.Role)) *MockGoCloak_UpdateRealmRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(gocloak.Role))
	})
	return _c
}

func (_c *MockGoCloak_UpdateRealmRole_Call) Return(_a0 error) *MockGoCloak_UpdateRealmRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoCloak_UpdateRealmRole_Call) RunAndReturn(run func(context.Context, string, string, string, gocloak.Role) error) *MockGoCloak_UpdateRealmRole_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, accessToken, realm, user
func (_m *MockGoCloak) UpdateUser(ctx context.Context, accessToken string, realm string, user gocloak.User) error {
	ret := _m.Called(ctx, accessToken, realm, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, gocloak.User) error); ok {
		r0 = rf(ctx, accessToken, realm, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGoCloak_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockGoCloak_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - accessToken string
//   - realm string
//   - user gocloak.User
func (_e *MockGoCloak_Expecter) UpdateUser(ctx interface{}, accessToken interface{}, realm interface{}, user interface{}) *MockGoCloak_UpdateUser_Call {
	return &MockGoCloak_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, accessToken, realm, user)}
}

func (_c *MockGoCloak_UpdateUser_Call) Run(run func(ctx context.Context, accessToken string, realm string, user gocloak.User)) *MockGoCloak_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(gocloak.User))
	})
	return _c
}

func (_c *MockGoCloak_UpdateUser_Call) Return(_a0 error) *MockGoCloak_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoCloak_UpdateUser_Call) RunAndReturn(run func(context.Context, string, string, gocloak.User) error) *MockGoCloak_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGoCloak creates a new instance of MockGoCloak. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGoCloak(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGoCloak {
	mock := &MockGoCloak{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
